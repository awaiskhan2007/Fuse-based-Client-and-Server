// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs-object.proto

#ifndef PROTOBUF_nfs_2dobject_2eproto__INCLUDED
#define PROTOBUF_nfs_2dobject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nfs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nfs_2dobject_2eproto();
void protobuf_AssignDesc_nfs_2dobject_2eproto();
void protobuf_ShutdownFile_nfs_2dobject_2eproto();

class nfsBool;
class nfsDirList;
class nfsObject;
class nfsStat;
class nfsVFSStat;

// ===================================================================

class nfsObject : public ::google::protobuf::Message {
 public:
  nfsObject();
  virtual ~nfsObject();

  nfsObject(const nfsObject& from);

  inline nfsObject& operator=(const nfsObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nfsObject& default_instance();

  void Swap(nfsObject* other);

  // implements Message ----------------------------------------------

  inline nfsObject* New() const { return New(NULL); }

  nfsObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nfsObject& from);
  void MergeFrom(const nfsObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nfsObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 methd_identfier = 1;
  void clear_methd_identfier();
  static const int kMethdIdentfierFieldNumber = 1;
  ::google::protobuf::int32 methd_identfier() const;
  void set_methd_identfier(::google::protobuf::int32 value);

  // optional int32 sys_call = 2;
  void clear_sys_call();
  static const int kSysCallFieldNumber = 2;
  ::google::protobuf::int32 sys_call() const;
  void set_sys_call(::google::protobuf::int32 value);

  // optional string item_name = 3;
  void clear_item_name();
  static const int kItemNameFieldNumber = 3;
  const ::std::string& item_name() const;
  void set_item_name(const ::std::string& value);
  void set_item_name(const char* value);
  void set_item_name(const char* value, size_t size);
  ::std::string* mutable_item_name();
  ::std::string* release_item_name();
  void set_allocated_item_name(::std::string* item_name);

  // optional string item_path = 4;
  void clear_item_path();
  static const int kItemPathFieldNumber = 4;
  const ::std::string& item_path() const;
  void set_item_path(const ::std::string& value);
  void set_item_path(const char* value);
  void set_item_path(const char* value, size_t size);
  ::std::string* mutable_item_path();
  ::std::string* release_item_path();
  void set_allocated_item_path(::std::string* item_path);

  // optional string item_sys_call = 5;
  void clear_item_sys_call();
  static const int kItemSysCallFieldNumber = 5;
  const ::std::string& item_sys_call() const;
  void set_item_sys_call(const ::std::string& value);
  void set_item_sys_call(const char* value);
  void set_item_sys_call(const char* value, size_t size);
  ::std::string* mutable_item_sys_call();
  ::std::string* release_item_sys_call();
  void set_allocated_item_sys_call(::std::string* item_sys_call);

  // optional int64 mode_t = 6;
  void clear_mode_t();
  static const int kModeTFieldNumber = 6;
  ::google::protobuf::int64 mode_t() const;
  void set_mode_t(::google::protobuf::int64 value);

  // optional int64 st_rdev = 7;
  void clear_st_rdev();
  static const int kStRdevFieldNumber = 7;
  ::google::protobuf::int64 st_rdev() const;
  void set_st_rdev(::google::protobuf::int64 value);

  // optional string name_from = 8;
  void clear_name_from();
  static const int kNameFromFieldNumber = 8;
  const ::std::string& name_from() const;
  void set_name_from(const ::std::string& value);
  void set_name_from(const char* value);
  void set_name_from(const char* value, size_t size);
  ::std::string* mutable_name_from();
  ::std::string* release_name_from();
  void set_allocated_name_from(::std::string* name_from);

  // optional string name_to = 9;
  void clear_name_to();
  static const int kNameToFieldNumber = 9;
  const ::std::string& name_to() const;
  void set_name_to(const ::std::string& value);
  void set_name_to(const char* value);
  void set_name_to(const char* value, size_t size);
  ::std::string* mutable_name_to();
  ::std::string* release_name_to();
  void set_allocated_name_to(::std::string* name_to);

  // optional int64 st_size = 10;
  void clear_st_size();
  static const int kStSizeFieldNumber = 10;
  ::google::protobuf::int64 st_size() const;
  void set_st_size(::google::protobuf::int64 value);

  // optional int64 off_set = 11;
  void clear_off_set();
  static const int kOffSetFieldNumber = 11;
  ::google::protobuf::int64 off_set() const;
  void set_off_set(::google::protobuf::int64 value);

  // optional bytes buffer = 12;
  void clear_buffer();
  static const int kBufferFieldNumber = 12;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // @@protoc_insertion_point(class_scope:nfs.nfsObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 methd_identfier_;
  ::google::protobuf::int32 sys_call_;
  ::google::protobuf::internal::ArenaStringPtr item_name_;
  ::google::protobuf::internal::ArenaStringPtr item_path_;
  ::google::protobuf::internal::ArenaStringPtr item_sys_call_;
  ::google::protobuf::int64 mode_t_;
  ::google::protobuf::int64 st_rdev_;
  ::google::protobuf::internal::ArenaStringPtr name_from_;
  ::google::protobuf::internal::ArenaStringPtr name_to_;
  ::google::protobuf::int64 st_size_;
  ::google::protobuf::int64 off_set_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2dobject_2eproto();
  friend void protobuf_AssignDesc_nfs_2dobject_2eproto();
  friend void protobuf_ShutdownFile_nfs_2dobject_2eproto();

  void InitAsDefaultInstance();
  static nfsObject* default_instance_;
};
// -------------------------------------------------------------------

class nfsStat : public ::google::protobuf::Message {
 public:
  nfsStat();
  virtual ~nfsStat();

  nfsStat(const nfsStat& from);

  inline nfsStat& operator=(const nfsStat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nfsStat& default_instance();

  void Swap(nfsStat* other);

  // implements Message ----------------------------------------------

  inline nfsStat* New() const { return New(NULL); }

  nfsStat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nfsStat& from);
  void MergeFrom(const nfsStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nfsStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 st_dev = 1;
  void clear_st_dev();
  static const int kStDevFieldNumber = 1;
  ::google::protobuf::int64 st_dev() const;
  void set_st_dev(::google::protobuf::int64 value);

  // optional int64 st_ino = 2;
  void clear_st_ino();
  static const int kStInoFieldNumber = 2;
  ::google::protobuf::int64 st_ino() const;
  void set_st_ino(::google::protobuf::int64 value);

  // optional int64 st_mode = 3;
  void clear_st_mode();
  static const int kStModeFieldNumber = 3;
  ::google::protobuf::int64 st_mode() const;
  void set_st_mode(::google::protobuf::int64 value);

  // optional int64 st_nlink = 4;
  void clear_st_nlink();
  static const int kStNlinkFieldNumber = 4;
  ::google::protobuf::int64 st_nlink() const;
  void set_st_nlink(::google::protobuf::int64 value);

  // optional int64 st_uid = 5;
  void clear_st_uid();
  static const int kStUidFieldNumber = 5;
  ::google::protobuf::int64 st_uid() const;
  void set_st_uid(::google::protobuf::int64 value);

  // optional int64 st_gid = 6;
  void clear_st_gid();
  static const int kStGidFieldNumber = 6;
  ::google::protobuf::int64 st_gid() const;
  void set_st_gid(::google::protobuf::int64 value);

  // optional int64 st_rdev = 7;
  void clear_st_rdev();
  static const int kStRdevFieldNumber = 7;
  ::google::protobuf::int64 st_rdev() const;
  void set_st_rdev(::google::protobuf::int64 value);

  // optional int64 st_size = 8;
  void clear_st_size();
  static const int kStSizeFieldNumber = 8;
  ::google::protobuf::int64 st_size() const;
  void set_st_size(::google::protobuf::int64 value);

  // optional int64 st_blksize = 9;
  void clear_st_blksize();
  static const int kStBlksizeFieldNumber = 9;
  ::google::protobuf::int64 st_blksize() const;
  void set_st_blksize(::google::protobuf::int64 value);

  // optional int64 st_blocks = 10;
  void clear_st_blocks();
  static const int kStBlocksFieldNumber = 10;
  ::google::protobuf::int64 st_blocks() const;
  void set_st_blocks(::google::protobuf::int64 value);

  // optional int64 mtime = 11;
  void clear_mtime();
  static const int kMtimeFieldNumber = 11;
  ::google::protobuf::int64 mtime() const;
  void set_mtime(::google::protobuf::int64 value);

  // optional int64 ctime = 12;
  void clear_ctime();
  static const int kCtimeFieldNumber = 12;
  ::google::protobuf::int64 ctime() const;
  void set_ctime(::google::protobuf::int64 value);

  // optional int64 atime = 13;
  void clear_atime();
  static const int kAtimeFieldNumber = 13;
  ::google::protobuf::int64 atime() const;
  void set_atime(::google::protobuf::int64 value);

  // optional int32 methd_identfier = 14;
  void clear_methd_identfier();
  static const int kMethdIdentfierFieldNumber = 14;
  ::google::protobuf::int32 methd_identfier() const;
  void set_methd_identfier(::google::protobuf::int32 value);

  // optional string item_name = 15;
  void clear_item_name();
  static const int kItemNameFieldNumber = 15;
  const ::std::string& item_name() const;
  void set_item_name(const ::std::string& value);
  void set_item_name(const char* value);
  void set_item_name(const char* value, size_t size);
  ::std::string* mutable_item_name();
  ::std::string* release_item_name();
  void set_allocated_item_name(::std::string* item_name);

  // optional string buffer_space = 16;
  void clear_buffer_space();
  static const int kBufferSpaceFieldNumber = 16;
  const ::std::string& buffer_space() const;
  void set_buffer_space(const ::std::string& value);
  void set_buffer_space(const char* value);
  void set_buffer_space(const char* value, size_t size);
  ::std::string* mutable_buffer_space();
  ::std::string* release_buffer_space();
  void set_allocated_buffer_space(::std::string* buffer_space);

  // optional int64 off_set = 17;
  void clear_off_set();
  static const int kOffSetFieldNumber = 17;
  ::google::protobuf::int64 off_set() const;
  void set_off_set(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:nfs.nfsStat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 st_dev_;
  ::google::protobuf::int64 st_ino_;
  ::google::protobuf::int64 st_mode_;
  ::google::protobuf::int64 st_nlink_;
  ::google::protobuf::int64 st_uid_;
  ::google::protobuf::int64 st_gid_;
  ::google::protobuf::int64 st_rdev_;
  ::google::protobuf::int64 st_size_;
  ::google::protobuf::int64 st_blksize_;
  ::google::protobuf::int64 st_blocks_;
  ::google::protobuf::int64 mtime_;
  ::google::protobuf::int64 ctime_;
  ::google::protobuf::int64 atime_;
  ::google::protobuf::internal::ArenaStringPtr item_name_;
  ::google::protobuf::internal::ArenaStringPtr buffer_space_;
  ::google::protobuf::int64 off_set_;
  ::google::protobuf::int32 methd_identfier_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2dobject_2eproto();
  friend void protobuf_AssignDesc_nfs_2dobject_2eproto();
  friend void protobuf_ShutdownFile_nfs_2dobject_2eproto();

  void InitAsDefaultInstance();
  static nfsStat* default_instance_;
};
// -------------------------------------------------------------------

class nfsVFSStat : public ::google::protobuf::Message {
 public:
  nfsVFSStat();
  virtual ~nfsVFSStat();

  nfsVFSStat(const nfsVFSStat& from);

  inline nfsVFSStat& operator=(const nfsVFSStat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nfsVFSStat& default_instance();

  void Swap(nfsVFSStat* other);

  // implements Message ----------------------------------------------

  inline nfsVFSStat* New() const { return New(NULL); }

  nfsVFSStat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nfsVFSStat& from);
  void MergeFrom(const nfsVFSStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nfsVFSStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 f_bsize = 1;
  void clear_f_bsize();
  static const int kFBsizeFieldNumber = 1;
  ::google::protobuf::int64 f_bsize() const;
  void set_f_bsize(::google::protobuf::int64 value);

  // optional int64 f_frsize = 2;
  void clear_f_frsize();
  static const int kFFrsizeFieldNumber = 2;
  ::google::protobuf::int64 f_frsize() const;
  void set_f_frsize(::google::protobuf::int64 value);

  // optional int64 f_blocks = 3;
  void clear_f_blocks();
  static const int kFBlocksFieldNumber = 3;
  ::google::protobuf::int64 f_blocks() const;
  void set_f_blocks(::google::protobuf::int64 value);

  // optional int64 f_bfree = 4;
  void clear_f_bfree();
  static const int kFBfreeFieldNumber = 4;
  ::google::protobuf::int64 f_bfree() const;
  void set_f_bfree(::google::protobuf::int64 value);

  // optional int64 f_bavail = 5;
  void clear_f_bavail();
  static const int kFBavailFieldNumber = 5;
  ::google::protobuf::int64 f_bavail() const;
  void set_f_bavail(::google::protobuf::int64 value);

  // optional int64 f_files = 6;
  void clear_f_files();
  static const int kFFilesFieldNumber = 6;
  ::google::protobuf::int64 f_files() const;
  void set_f_files(::google::protobuf::int64 value);

  // optional int64 f_ffree = 7;
  void clear_f_ffree();
  static const int kFFfreeFieldNumber = 7;
  ::google::protobuf::int64 f_ffree() const;
  void set_f_ffree(::google::protobuf::int64 value);

  // optional int64 f_favail = 8;
  void clear_f_favail();
  static const int kFFavailFieldNumber = 8;
  ::google::protobuf::int64 f_favail() const;
  void set_f_favail(::google::protobuf::int64 value);

  // optional int64 f_fsid = 9;
  void clear_f_fsid();
  static const int kFFsidFieldNumber = 9;
  ::google::protobuf::int64 f_fsid() const;
  void set_f_fsid(::google::protobuf::int64 value);

  // optional int64 f_flag = 10;
  void clear_f_flag();
  static const int kFFlagFieldNumber = 10;
  ::google::protobuf::int64 f_flag() const;
  void set_f_flag(::google::protobuf::int64 value);

  // optional int64 f_namemax = 11;
  void clear_f_namemax();
  static const int kFNamemaxFieldNumber = 11;
  ::google::protobuf::int64 f_namemax() const;
  void set_f_namemax(::google::protobuf::int64 value);

  // optional int32 result = 12;
  void clear_result();
  static const int kResultFieldNumber = 12;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nfs.nfsVFSStat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 f_bsize_;
  ::google::protobuf::int64 f_frsize_;
  ::google::protobuf::int64 f_blocks_;
  ::google::protobuf::int64 f_bfree_;
  ::google::protobuf::int64 f_bavail_;
  ::google::protobuf::int64 f_files_;
  ::google::protobuf::int64 f_ffree_;
  ::google::protobuf::int64 f_favail_;
  ::google::protobuf::int64 f_fsid_;
  ::google::protobuf::int64 f_flag_;
  ::google::protobuf::int64 f_namemax_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2dobject_2eproto();
  friend void protobuf_AssignDesc_nfs_2dobject_2eproto();
  friend void protobuf_ShutdownFile_nfs_2dobject_2eproto();

  void InitAsDefaultInstance();
  static nfsVFSStat* default_instance_;
};
// -------------------------------------------------------------------

class nfsBool : public ::google::protobuf::Message {
 public:
  nfsBool();
  virtual ~nfsBool();

  nfsBool(const nfsBool& from);

  inline nfsBool& operator=(const nfsBool& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nfsBool& default_instance();

  void Swap(nfsBool* other);

  // implements Message ----------------------------------------------

  inline nfsBool* New() const { return New(NULL); }

  nfsBool* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nfsBool& from);
  void MergeFrom(const nfsBool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nfsBool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional .nfs.nfsStat nfs_stat = 2;
  bool has_nfs_stat() const;
  void clear_nfs_stat();
  static const int kNfsStatFieldNumber = 2;
  const ::nfs::nfsStat& nfs_stat() const;
  ::nfs::nfsStat* mutable_nfs_stat();
  ::nfs::nfsStat* release_nfs_stat();
  void set_allocated_nfs_stat(::nfs::nfsStat* nfs_stat);

  // optional string fi_name = 3;
  void clear_fi_name();
  static const int kFiNameFieldNumber = 3;
  const ::std::string& fi_name() const;
  void set_fi_name(const ::std::string& value);
  void set_fi_name(const char* value);
  void set_fi_name(const char* value, size_t size);
  ::std::string* mutable_fi_name();
  ::std::string* release_fi_name();
  void set_allocated_fi_name(::std::string* fi_name);

  // optional string fi_dirname = 4;
  void clear_fi_dirname();
  static const int kFiDirnameFieldNumber = 4;
  const ::std::string& fi_dirname() const;
  void set_fi_dirname(const ::std::string& value);
  void set_fi_dirname(const char* value);
  void set_fi_dirname(const char* value, size_t size);
  ::std::string* mutable_fi_dirname();
  ::std::string* release_fi_dirname();
  void set_allocated_fi_dirname(::std::string* fi_dirname);

  // optional string fi_pathname = 5;
  void clear_fi_pathname();
  static const int kFiPathnameFieldNumber = 5;
  const ::std::string& fi_pathname() const;
  void set_fi_pathname(const ::std::string& value);
  void set_fi_pathname(const char* value);
  void set_fi_pathname(const char* value, size_t size);
  ::std::string* mutable_fi_pathname();
  ::std::string* release_fi_pathname();
  void set_allocated_fi_pathname(::std::string* fi_pathname);

  // optional int64 fi_offset = 6;
  void clear_fi_offset();
  static const int kFiOffsetFieldNumber = 6;
  ::google::protobuf::int64 fi_offset() const;
  void set_fi_offset(::google::protobuf::int64 value);

  // optional string fi_fs = 7;
  void clear_fi_fs();
  static const int kFiFsFieldNumber = 7;
  const ::std::string& fi_fs() const;
  void set_fi_fs(const ::std::string& value);
  void set_fi_fs(const char* value);
  void set_fi_fs(const char* value, size_t size);
  ::std::string* mutable_fi_fs();
  ::std::string* release_fi_fs();
  void set_allocated_fi_fs(::std::string* fi_fs);

  // optional string fi_mount = 8;
  void clear_fi_mount();
  static const int kFiMountFieldNumber = 8;
  const ::std::string& fi_mount() const;
  void set_fi_mount(const ::std::string& value);
  void set_fi_mount(const char* value);
  void set_fi_mount(const char* value, size_t size);
  ::std::string* mutable_fi_mount();
  ::std::string* release_fi_mount();
  void set_allocated_fi_mount(::std::string* fi_mount);

  // optional int64 fi_open_flags = 9;
  void clear_fi_open_flags();
  static const int kFiOpenFlagsFieldNumber = 9;
  ::google::protobuf::int64 fi_open_flags() const;
  void set_fi_open_flags(::google::protobuf::int64 value);

  // optional int64 mode_t = 10;
  void clear_mode_t();
  static const int kModeTFieldNumber = 10;
  ::google::protobuf::int64 mode_t() const;
  void set_mode_t(::google::protobuf::int64 value);

  // optional int64 st_rdev = 11;
  void clear_st_rdev();
  static const int kStRdevFieldNumber = 11;
  ::google::protobuf::int64 st_rdev() const;
  void set_st_rdev(::google::protobuf::int64 value);

  // optional bytes buffer_space = 12;
  void clear_buffer_space();
  static const int kBufferSpaceFieldNumber = 12;
  const ::std::string& buffer_space() const;
  void set_buffer_space(const ::std::string& value);
  void set_buffer_space(const char* value);
  void set_buffer_space(const void* value, size_t size);
  ::std::string* mutable_buffer_space();
  ::std::string* release_buffer_space();
  void set_allocated_buffer_space(::std::string* buffer_space);

  // optional int64 st_offset = 13;
  void clear_st_offset();
  static const int kStOffsetFieldNumber = 13;
  ::google::protobuf::int64 st_offset() const;
  void set_st_offset(::google::protobuf::int64 value);

  // optional int64 st_size = 14;
  void clear_st_size();
  static const int kStSizeFieldNumber = 14;
  ::google::protobuf::int64 st_size() const;
  void set_st_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:nfs.nfsBool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::nfsStat* nfs_stat_;
  ::google::protobuf::internal::ArenaStringPtr fi_name_;
  ::google::protobuf::internal::ArenaStringPtr fi_dirname_;
  ::google::protobuf::internal::ArenaStringPtr fi_pathname_;
  ::google::protobuf::int64 fi_offset_;
  ::google::protobuf::internal::ArenaStringPtr fi_fs_;
  ::google::protobuf::internal::ArenaStringPtr fi_mount_;
  ::google::protobuf::int64 fi_open_flags_;
  ::google::protobuf::int64 mode_t_;
  ::google::protobuf::int64 st_rdev_;
  ::google::protobuf::internal::ArenaStringPtr buffer_space_;
  ::google::protobuf::int64 st_offset_;
  ::google::protobuf::int64 st_size_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2dobject_2eproto();
  friend void protobuf_AssignDesc_nfs_2dobject_2eproto();
  friend void protobuf_ShutdownFile_nfs_2dobject_2eproto();

  void InitAsDefaultInstance();
  static nfsBool* default_instance_;
};
// -------------------------------------------------------------------

class nfsDirList : public ::google::protobuf::Message {
 public:
  nfsDirList();
  virtual ~nfsDirList();

  nfsDirList(const nfsDirList& from);

  inline nfsDirList& operator=(const nfsDirList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nfsDirList& default_instance();

  void Swap(nfsDirList* other);

  // implements Message ----------------------------------------------

  inline nfsDirList* New() const { return New(NULL); }

  nfsDirList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nfsDirList& from);
  void MergeFrom(const nfsDirList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nfsDirList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nfs_dir_result = 1;
  void clear_nfs_dir_result();
  static const int kNfsDirResultFieldNumber = 1;
  ::google::protobuf::int32 nfs_dir_result() const;
  void set_nfs_dir_result(::google::protobuf::int32 value);

  // repeated string nfs_dir_list = 2;
  int nfs_dir_list_size() const;
  void clear_nfs_dir_list();
  static const int kNfsDirListFieldNumber = 2;
  const ::std::string& nfs_dir_list(int index) const;
  ::std::string* mutable_nfs_dir_list(int index);
  void set_nfs_dir_list(int index, const ::std::string& value);
  void set_nfs_dir_list(int index, const char* value);
  void set_nfs_dir_list(int index, const char* value, size_t size);
  ::std::string* add_nfs_dir_list();
  void add_nfs_dir_list(const ::std::string& value);
  void add_nfs_dir_list(const char* value);
  void add_nfs_dir_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nfs_dir_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nfs_dir_list();

  // @@protoc_insertion_point(class_scope:nfs.nfsDirList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nfs_dir_list_;
  ::google::protobuf::int32 nfs_dir_result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2dobject_2eproto();
  friend void protobuf_AssignDesc_nfs_2dobject_2eproto();
  friend void protobuf_ShutdownFile_nfs_2dobject_2eproto();

  void InitAsDefaultInstance();
  static nfsDirList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// nfsObject

// optional int32 methd_identfier = 1;
inline void nfsObject::clear_methd_identfier() {
  methd_identfier_ = 0;
}
inline ::google::protobuf::int32 nfsObject::methd_identfier() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.methd_identfier)
  return methd_identfier_;
}
inline void nfsObject::set_methd_identfier(::google::protobuf::int32 value) {
  
  methd_identfier_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.methd_identfier)
}

// optional int32 sys_call = 2;
inline void nfsObject::clear_sys_call() {
  sys_call_ = 0;
}
inline ::google::protobuf::int32 nfsObject::sys_call() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.sys_call)
  return sys_call_;
}
inline void nfsObject::set_sys_call(::google::protobuf::int32 value) {
  
  sys_call_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.sys_call)
}

// optional string item_name = 3;
inline void nfsObject::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsObject::item_name() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.item_name)
  return item_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_item_name(const ::std::string& value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.item_name)
}
inline void nfsObject::set_item_name(const char* value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.item_name)
}
inline void nfsObject::set_item_name(const char* value, size_t size) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.item_name)
}
inline ::std::string* nfsObject::mutable_item_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsObject::release_item_name() {
  
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    
  } else {
    
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.item_name)
}

// optional string item_path = 4;
inline void nfsObject::clear_item_path() {
  item_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsObject::item_path() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.item_path)
  return item_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_item_path(const ::std::string& value) {
  
  item_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.item_path)
}
inline void nfsObject::set_item_path(const char* value) {
  
  item_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.item_path)
}
inline void nfsObject::set_item_path(const char* value, size_t size) {
  
  item_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.item_path)
}
inline ::std::string* nfsObject::mutable_item_path() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.item_path)
  return item_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsObject::release_item_path() {
  
  return item_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_allocated_item_path(::std::string* item_path) {
  if (item_path != NULL) {
    
  } else {
    
  }
  item_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_path);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.item_path)
}

// optional string item_sys_call = 5;
inline void nfsObject::clear_item_sys_call() {
  item_sys_call_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsObject::item_sys_call() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.item_sys_call)
  return item_sys_call_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_item_sys_call(const ::std::string& value) {
  
  item_sys_call_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.item_sys_call)
}
inline void nfsObject::set_item_sys_call(const char* value) {
  
  item_sys_call_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.item_sys_call)
}
inline void nfsObject::set_item_sys_call(const char* value, size_t size) {
  
  item_sys_call_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.item_sys_call)
}
inline ::std::string* nfsObject::mutable_item_sys_call() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.item_sys_call)
  return item_sys_call_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsObject::release_item_sys_call() {
  
  return item_sys_call_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_allocated_item_sys_call(::std::string* item_sys_call) {
  if (item_sys_call != NULL) {
    
  } else {
    
  }
  item_sys_call_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_sys_call);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.item_sys_call)
}

// optional int64 mode_t = 6;
inline void nfsObject::clear_mode_t() {
  mode_t_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsObject::mode_t() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.mode_t)
  return mode_t_;
}
inline void nfsObject::set_mode_t(::google::protobuf::int64 value) {
  
  mode_t_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.mode_t)
}

// optional int64 st_rdev = 7;
inline void nfsObject::clear_st_rdev() {
  st_rdev_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsObject::st_rdev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.st_rdev)
  return st_rdev_;
}
inline void nfsObject::set_st_rdev(::google::protobuf::int64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.st_rdev)
}

// optional string name_from = 8;
inline void nfsObject::clear_name_from() {
  name_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsObject::name_from() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.name_from)
  return name_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_name_from(const ::std::string& value) {
  
  name_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.name_from)
}
inline void nfsObject::set_name_from(const char* value) {
  
  name_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.name_from)
}
inline void nfsObject::set_name_from(const char* value, size_t size) {
  
  name_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.name_from)
}
inline ::std::string* nfsObject::mutable_name_from() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.name_from)
  return name_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsObject::release_name_from() {
  
  return name_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_allocated_name_from(::std::string* name_from) {
  if (name_from != NULL) {
    
  } else {
    
  }
  name_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_from);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.name_from)
}

// optional string name_to = 9;
inline void nfsObject::clear_name_to() {
  name_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsObject::name_to() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.name_to)
  return name_to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_name_to(const ::std::string& value) {
  
  name_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.name_to)
}
inline void nfsObject::set_name_to(const char* value) {
  
  name_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.name_to)
}
inline void nfsObject::set_name_to(const char* value, size_t size) {
  
  name_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.name_to)
}
inline ::std::string* nfsObject::mutable_name_to() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.name_to)
  return name_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsObject::release_name_to() {
  
  return name_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_allocated_name_to(::std::string* name_to) {
  if (name_to != NULL) {
    
  } else {
    
  }
  name_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.name_to)
}

// optional int64 st_size = 10;
inline void nfsObject::clear_st_size() {
  st_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsObject::st_size() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.st_size)
  return st_size_;
}
inline void nfsObject::set_st_size(::google::protobuf::int64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.st_size)
}

// optional int64 off_set = 11;
inline void nfsObject::clear_off_set() {
  off_set_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsObject::off_set() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.off_set)
  return off_set_;
}
inline void nfsObject::set_off_set(::google::protobuf::int64 value) {
  
  off_set_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.off_set)
}

// optional bytes buffer = 12;
inline void nfsObject::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsObject::buffer() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.buffer)
}
inline void nfsObject::set_buffer(const char* value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.buffer)
}
inline void nfsObject::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.buffer)
}
inline ::std::string* nfsObject::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsObject::release_buffer() {
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsObject::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.buffer)
}

// -------------------------------------------------------------------

// nfsStat

// optional int64 st_dev = 1;
inline void nfsStat::clear_st_dev() {
  st_dev_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_dev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_dev)
  return st_dev_;
}
inline void nfsStat::set_st_dev(::google::protobuf::int64 value) {
  
  st_dev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_dev)
}

// optional int64 st_ino = 2;
inline void nfsStat::clear_st_ino() {
  st_ino_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_ino() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_ino)
  return st_ino_;
}
inline void nfsStat::set_st_ino(::google::protobuf::int64 value) {
  
  st_ino_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_ino)
}

// optional int64 st_mode = 3;
inline void nfsStat::clear_st_mode() {
  st_mode_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_mode() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_mode)
  return st_mode_;
}
inline void nfsStat::set_st_mode(::google::protobuf::int64 value) {
  
  st_mode_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_mode)
}

// optional int64 st_nlink = 4;
inline void nfsStat::clear_st_nlink() {
  st_nlink_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_nlink() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_nlink)
  return st_nlink_;
}
inline void nfsStat::set_st_nlink(::google::protobuf::int64 value) {
  
  st_nlink_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_nlink)
}

// optional int64 st_uid = 5;
inline void nfsStat::clear_st_uid() {
  st_uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_uid() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_uid)
  return st_uid_;
}
inline void nfsStat::set_st_uid(::google::protobuf::int64 value) {
  
  st_uid_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_uid)
}

// optional int64 st_gid = 6;
inline void nfsStat::clear_st_gid() {
  st_gid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_gid() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_gid)
  return st_gid_;
}
inline void nfsStat::set_st_gid(::google::protobuf::int64 value) {
  
  st_gid_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_gid)
}

// optional int64 st_rdev = 7;
inline void nfsStat::clear_st_rdev() {
  st_rdev_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_rdev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_rdev)
  return st_rdev_;
}
inline void nfsStat::set_st_rdev(::google::protobuf::int64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_rdev)
}

// optional int64 st_size = 8;
inline void nfsStat::clear_st_size() {
  st_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_size() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_size)
  return st_size_;
}
inline void nfsStat::set_st_size(::google::protobuf::int64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_size)
}

// optional int64 st_blksize = 9;
inline void nfsStat::clear_st_blksize() {
  st_blksize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_blksize() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_blksize)
  return st_blksize_;
}
inline void nfsStat::set_st_blksize(::google::protobuf::int64 value) {
  
  st_blksize_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_blksize)
}

// optional int64 st_blocks = 10;
inline void nfsStat::clear_st_blocks() {
  st_blocks_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::st_blocks() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_blocks)
  return st_blocks_;
}
inline void nfsStat::set_st_blocks(::google::protobuf::int64 value) {
  
  st_blocks_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_blocks)
}

// optional int64 mtime = 11;
inline void nfsStat::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::mtime() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.mtime)
  return mtime_;
}
inline void nfsStat::set_mtime(::google::protobuf::int64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.mtime)
}

// optional int64 ctime = 12;
inline void nfsStat::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::ctime() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.ctime)
  return ctime_;
}
inline void nfsStat::set_ctime(::google::protobuf::int64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.ctime)
}

// optional int64 atime = 13;
inline void nfsStat::clear_atime() {
  atime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::atime() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.atime)
  return atime_;
}
inline void nfsStat::set_atime(::google::protobuf::int64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.atime)
}

// optional int32 methd_identfier = 14;
inline void nfsStat::clear_methd_identfier() {
  methd_identfier_ = 0;
}
inline ::google::protobuf::int32 nfsStat::methd_identfier() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.methd_identfier)
  return methd_identfier_;
}
inline void nfsStat::set_methd_identfier(::google::protobuf::int32 value) {
  
  methd_identfier_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.methd_identfier)
}

// optional string item_name = 15;
inline void nfsStat::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsStat::item_name() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.item_name)
  return item_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsStat::set_item_name(const ::std::string& value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsStat.item_name)
}
inline void nfsStat::set_item_name(const char* value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsStat.item_name)
}
inline void nfsStat::set_item_name(const char* value, size_t size) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsStat.item_name)
}
inline ::std::string* nfsStat::mutable_item_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsStat.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsStat::release_item_name() {
  
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsStat::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    
  } else {
    
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsStat.item_name)
}

// optional string buffer_space = 16;
inline void nfsStat::clear_buffer_space() {
  buffer_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsStat::buffer_space() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.buffer_space)
  return buffer_space_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsStat::set_buffer_space(const ::std::string& value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsStat.buffer_space)
}
inline void nfsStat::set_buffer_space(const char* value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsStat.buffer_space)
}
inline void nfsStat::set_buffer_space(const char* value, size_t size) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsStat.buffer_space)
}
inline ::std::string* nfsStat::mutable_buffer_space() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsStat.buffer_space)
  return buffer_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsStat::release_buffer_space() {
  
  return buffer_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsStat::set_allocated_buffer_space(::std::string* buffer_space) {
  if (buffer_space != NULL) {
    
  } else {
    
  }
  buffer_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer_space);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsStat.buffer_space)
}

// optional int64 off_set = 17;
inline void nfsStat::clear_off_set() {
  off_set_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsStat::off_set() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.off_set)
  return off_set_;
}
inline void nfsStat::set_off_set(::google::protobuf::int64 value) {
  
  off_set_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.off_set)
}

// -------------------------------------------------------------------

// nfsVFSStat

// optional int64 f_bsize = 1;
inline void nfsVFSStat::clear_f_bsize() {
  f_bsize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_bsize() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_bsize)
  return f_bsize_;
}
inline void nfsVFSStat::set_f_bsize(::google::protobuf::int64 value) {
  
  f_bsize_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_bsize)
}

// optional int64 f_frsize = 2;
inline void nfsVFSStat::clear_f_frsize() {
  f_frsize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_frsize() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_frsize)
  return f_frsize_;
}
inline void nfsVFSStat::set_f_frsize(::google::protobuf::int64 value) {
  
  f_frsize_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_frsize)
}

// optional int64 f_blocks = 3;
inline void nfsVFSStat::clear_f_blocks() {
  f_blocks_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_blocks() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_blocks)
  return f_blocks_;
}
inline void nfsVFSStat::set_f_blocks(::google::protobuf::int64 value) {
  
  f_blocks_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_blocks)
}

// optional int64 f_bfree = 4;
inline void nfsVFSStat::clear_f_bfree() {
  f_bfree_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_bfree() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_bfree)
  return f_bfree_;
}
inline void nfsVFSStat::set_f_bfree(::google::protobuf::int64 value) {
  
  f_bfree_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_bfree)
}

// optional int64 f_bavail = 5;
inline void nfsVFSStat::clear_f_bavail() {
  f_bavail_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_bavail() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_bavail)
  return f_bavail_;
}
inline void nfsVFSStat::set_f_bavail(::google::protobuf::int64 value) {
  
  f_bavail_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_bavail)
}

// optional int64 f_files = 6;
inline void nfsVFSStat::clear_f_files() {
  f_files_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_files() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_files)
  return f_files_;
}
inline void nfsVFSStat::set_f_files(::google::protobuf::int64 value) {
  
  f_files_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_files)
}

// optional int64 f_ffree = 7;
inline void nfsVFSStat::clear_f_ffree() {
  f_ffree_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_ffree() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_ffree)
  return f_ffree_;
}
inline void nfsVFSStat::set_f_ffree(::google::protobuf::int64 value) {
  
  f_ffree_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_ffree)
}

// optional int64 f_favail = 8;
inline void nfsVFSStat::clear_f_favail() {
  f_favail_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_favail() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_favail)
  return f_favail_;
}
inline void nfsVFSStat::set_f_favail(::google::protobuf::int64 value) {
  
  f_favail_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_favail)
}

// optional int64 f_fsid = 9;
inline void nfsVFSStat::clear_f_fsid() {
  f_fsid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_fsid() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_fsid)
  return f_fsid_;
}
inline void nfsVFSStat::set_f_fsid(::google::protobuf::int64 value) {
  
  f_fsid_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_fsid)
}

// optional int64 f_flag = 10;
inline void nfsVFSStat::clear_f_flag() {
  f_flag_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_flag() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_flag)
  return f_flag_;
}
inline void nfsVFSStat::set_f_flag(::google::protobuf::int64 value) {
  
  f_flag_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_flag)
}

// optional int64 f_namemax = 11;
inline void nfsVFSStat::clear_f_namemax() {
  f_namemax_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsVFSStat::f_namemax() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_namemax)
  return f_namemax_;
}
inline void nfsVFSStat::set_f_namemax(::google::protobuf::int64 value) {
  
  f_namemax_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_namemax)
}

// optional int32 result = 12;
inline void nfsVFSStat::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 nfsVFSStat::result() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.result)
  return result_;
}
inline void nfsVFSStat::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.result)
}

// -------------------------------------------------------------------

// nfsBool

// optional int32 result = 1;
inline void nfsBool::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 nfsBool::result() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.result)
  return result_;
}
inline void nfsBool::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.result)
}

// optional .nfs.nfsStat nfs_stat = 2;
inline bool nfsBool::has_nfs_stat() const {
  return !_is_default_instance_ && nfs_stat_ != NULL;
}
inline void nfsBool::clear_nfs_stat() {
  if (GetArenaNoVirtual() == NULL && nfs_stat_ != NULL) delete nfs_stat_;
  nfs_stat_ = NULL;
}
inline const ::nfs::nfsStat& nfsBool::nfs_stat() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.nfs_stat)
  return nfs_stat_ != NULL ? *nfs_stat_ : *default_instance_->nfs_stat_;
}
inline ::nfs::nfsStat* nfsBool::mutable_nfs_stat() {
  
  if (nfs_stat_ == NULL) {
    nfs_stat_ = new ::nfs::nfsStat;
  }
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.nfs_stat)
  return nfs_stat_;
}
inline ::nfs::nfsStat* nfsBool::release_nfs_stat() {
  
  ::nfs::nfsStat* temp = nfs_stat_;
  nfs_stat_ = NULL;
  return temp;
}
inline void nfsBool::set_allocated_nfs_stat(::nfs::nfsStat* nfs_stat) {
  delete nfs_stat_;
  nfs_stat_ = nfs_stat;
  if (nfs_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.nfs_stat)
}

// optional string fi_name = 3;
inline void nfsBool::clear_fi_name() {
  fi_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsBool::fi_name() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_name)
  return fi_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_fi_name(const ::std::string& value) {
  
  fi_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_name)
}
inline void nfsBool::set_fi_name(const char* value) {
  
  fi_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_name)
}
inline void nfsBool::set_fi_name(const char* value, size_t size) {
  
  fi_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_name)
}
inline ::std::string* nfsBool::mutable_fi_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_name)
  return fi_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsBool::release_fi_name() {
  
  return fi_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_allocated_fi_name(::std::string* fi_name) {
  if (fi_name != NULL) {
    
  } else {
    
  }
  fi_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_name);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_name)
}

// optional string fi_dirname = 4;
inline void nfsBool::clear_fi_dirname() {
  fi_dirname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsBool::fi_dirname() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_dirname)
  return fi_dirname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_fi_dirname(const ::std::string& value) {
  
  fi_dirname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_dirname)
}
inline void nfsBool::set_fi_dirname(const char* value) {
  
  fi_dirname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_dirname)
}
inline void nfsBool::set_fi_dirname(const char* value, size_t size) {
  
  fi_dirname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_dirname)
}
inline ::std::string* nfsBool::mutable_fi_dirname() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_dirname)
  return fi_dirname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsBool::release_fi_dirname() {
  
  return fi_dirname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_allocated_fi_dirname(::std::string* fi_dirname) {
  if (fi_dirname != NULL) {
    
  } else {
    
  }
  fi_dirname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_dirname);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_dirname)
}

// optional string fi_pathname = 5;
inline void nfsBool::clear_fi_pathname() {
  fi_pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsBool::fi_pathname() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_pathname)
  return fi_pathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_fi_pathname(const ::std::string& value) {
  
  fi_pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_pathname)
}
inline void nfsBool::set_fi_pathname(const char* value) {
  
  fi_pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_pathname)
}
inline void nfsBool::set_fi_pathname(const char* value, size_t size) {
  
  fi_pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_pathname)
}
inline ::std::string* nfsBool::mutable_fi_pathname() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_pathname)
  return fi_pathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsBool::release_fi_pathname() {
  
  return fi_pathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_allocated_fi_pathname(::std::string* fi_pathname) {
  if (fi_pathname != NULL) {
    
  } else {
    
  }
  fi_pathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_pathname);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_pathname)
}

// optional int64 fi_offset = 6;
inline void nfsBool::clear_fi_offset() {
  fi_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsBool::fi_offset() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_offset)
  return fi_offset_;
}
inline void nfsBool::set_fi_offset(::google::protobuf::int64 value) {
  
  fi_offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_offset)
}

// optional string fi_fs = 7;
inline void nfsBool::clear_fi_fs() {
  fi_fs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsBool::fi_fs() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_fs)
  return fi_fs_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_fi_fs(const ::std::string& value) {
  
  fi_fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_fs)
}
inline void nfsBool::set_fi_fs(const char* value) {
  
  fi_fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_fs)
}
inline void nfsBool::set_fi_fs(const char* value, size_t size) {
  
  fi_fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_fs)
}
inline ::std::string* nfsBool::mutable_fi_fs() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_fs)
  return fi_fs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsBool::release_fi_fs() {
  
  return fi_fs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_allocated_fi_fs(::std::string* fi_fs) {
  if (fi_fs != NULL) {
    
  } else {
    
  }
  fi_fs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_fs);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_fs)
}

// optional string fi_mount = 8;
inline void nfsBool::clear_fi_mount() {
  fi_mount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsBool::fi_mount() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_mount)
  return fi_mount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_fi_mount(const ::std::string& value) {
  
  fi_mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_mount)
}
inline void nfsBool::set_fi_mount(const char* value) {
  
  fi_mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_mount)
}
inline void nfsBool::set_fi_mount(const char* value, size_t size) {
  
  fi_mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_mount)
}
inline ::std::string* nfsBool::mutable_fi_mount() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_mount)
  return fi_mount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsBool::release_fi_mount() {
  
  return fi_mount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_allocated_fi_mount(::std::string* fi_mount) {
  if (fi_mount != NULL) {
    
  } else {
    
  }
  fi_mount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_mount);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_mount)
}

// optional int64 fi_open_flags = 9;
inline void nfsBool::clear_fi_open_flags() {
  fi_open_flags_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsBool::fi_open_flags() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_open_flags)
  return fi_open_flags_;
}
inline void nfsBool::set_fi_open_flags(::google::protobuf::int64 value) {
  
  fi_open_flags_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_open_flags)
}

// optional int64 mode_t = 10;
inline void nfsBool::clear_mode_t() {
  mode_t_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsBool::mode_t() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.mode_t)
  return mode_t_;
}
inline void nfsBool::set_mode_t(::google::protobuf::int64 value) {
  
  mode_t_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.mode_t)
}

// optional int64 st_rdev = 11;
inline void nfsBool::clear_st_rdev() {
  st_rdev_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsBool::st_rdev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.st_rdev)
  return st_rdev_;
}
inline void nfsBool::set_st_rdev(::google::protobuf::int64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.st_rdev)
}

// optional bytes buffer_space = 12;
inline void nfsBool::clear_buffer_space() {
  buffer_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nfsBool::buffer_space() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.buffer_space)
  return buffer_space_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_buffer_space(const ::std::string& value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.buffer_space)
}
inline void nfsBool::set_buffer_space(const char* value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.buffer_space)
}
inline void nfsBool::set_buffer_space(const void* value, size_t size) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.buffer_space)
}
inline ::std::string* nfsBool::mutable_buffer_space() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.buffer_space)
  return buffer_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nfsBool::release_buffer_space() {
  
  return buffer_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nfsBool::set_allocated_buffer_space(::std::string* buffer_space) {
  if (buffer_space != NULL) {
    
  } else {
    
  }
  buffer_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer_space);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.buffer_space)
}

// optional int64 st_offset = 13;
inline void nfsBool::clear_st_offset() {
  st_offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsBool::st_offset() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.st_offset)
  return st_offset_;
}
inline void nfsBool::set_st_offset(::google::protobuf::int64 value) {
  
  st_offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.st_offset)
}

// optional int64 st_size = 14;
inline void nfsBool::clear_st_size() {
  st_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 nfsBool::st_size() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.st_size)
  return st_size_;
}
inline void nfsBool::set_st_size(::google::protobuf::int64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.st_size)
}

// -------------------------------------------------------------------

// nfsDirList

// optional int32 nfs_dir_result = 1;
inline void nfsDirList::clear_nfs_dir_result() {
  nfs_dir_result_ = 0;
}
inline ::google::protobuf::int32 nfsDirList::nfs_dir_result() const {
  // @@protoc_insertion_point(field_get:nfs.nfsDirList.nfs_dir_result)
  return nfs_dir_result_;
}
inline void nfsDirList::set_nfs_dir_result(::google::protobuf::int32 value) {
  
  nfs_dir_result_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsDirList.nfs_dir_result)
}

// repeated string nfs_dir_list = 2;
inline int nfsDirList::nfs_dir_list_size() const {
  return nfs_dir_list_.size();
}
inline void nfsDirList::clear_nfs_dir_list() {
  nfs_dir_list_.Clear();
}
inline const ::std::string& nfsDirList::nfs_dir_list(int index) const {
  // @@protoc_insertion_point(field_get:nfs.nfsDirList.nfs_dir_list)
  return nfs_dir_list_.Get(index);
}
inline ::std::string* nfsDirList::mutable_nfs_dir_list(int index) {
  // @@protoc_insertion_point(field_mutable:nfs.nfsDirList.nfs_dir_list)
  return nfs_dir_list_.Mutable(index);
}
inline void nfsDirList::set_nfs_dir_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nfs.nfsDirList.nfs_dir_list)
  nfs_dir_list_.Mutable(index)->assign(value);
}
inline void nfsDirList::set_nfs_dir_list(int index, const char* value) {
  nfs_dir_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nfs.nfsDirList.nfs_dir_list)
}
inline void nfsDirList::set_nfs_dir_list(int index, const char* value, size_t size) {
  nfs_dir_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsDirList.nfs_dir_list)
}
inline ::std::string* nfsDirList::add_nfs_dir_list() {
  return nfs_dir_list_.Add();
}
inline void nfsDirList::add_nfs_dir_list(const ::std::string& value) {
  nfs_dir_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nfs.nfsDirList.nfs_dir_list)
}
inline void nfsDirList::add_nfs_dir_list(const char* value) {
  nfs_dir_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nfs.nfsDirList.nfs_dir_list)
}
inline void nfsDirList::add_nfs_dir_list(const char* value, size_t size) {
  nfs_dir_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nfs.nfsDirList.nfs_dir_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
nfsDirList::nfs_dir_list() const {
  // @@protoc_insertion_point(field_list:nfs.nfsDirList.nfs_dir_list)
  return nfs_dir_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
nfsDirList::mutable_nfs_dir_list() {
  // @@protoc_insertion_point(field_mutable_list:nfs.nfsDirList.nfs_dir_list)
  return &nfs_dir_list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nfs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nfs_2dobject_2eproto__INCLUDED
