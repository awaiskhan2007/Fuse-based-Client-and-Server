// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs-object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nfs-object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nfs {

namespace {

const ::google::protobuf::Descriptor* nfsObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nfsObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* nfsStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nfsStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* nfsVFSStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nfsVFSStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* nfsBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nfsBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* nfsDirList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nfsDirList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nfs_2dobject_2eproto() {
  protobuf_AddDesc_nfs_2dobject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nfs-object.proto");
  GOOGLE_CHECK(file != NULL);
  nfsObject_descriptor_ = file->message_type(0);
  static const int nfsObject_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, methd_identfier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, sys_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, item_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, item_sys_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, mode_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, st_rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, name_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, name_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, st_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, off_set_),
  };
  nfsObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nfsObject_descriptor_,
      nfsObject::default_instance_,
      nfsObject_offsets_,
      -1,
      -1,
      -1,
      sizeof(nfsObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsObject, _is_default_instance_));
  nfsStat_descriptor_ = file->message_type(1);
  static const int nfsStat_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_ino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_nlink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_blksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, st_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, methd_identfier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, buffer_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, off_set_),
  };
  nfsStat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nfsStat_descriptor_,
      nfsStat::default_instance_,
      nfsStat_offsets_,
      -1,
      -1,
      -1,
      sizeof(nfsStat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsStat, _is_default_instance_));
  nfsVFSStat_descriptor_ = file->message_type(2);
  static const int nfsVFSStat_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_bsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_frsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_bfree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_bavail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_ffree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_favail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_fsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, f_namemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, result_),
  };
  nfsVFSStat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nfsVFSStat_descriptor_,
      nfsVFSStat::default_instance_,
      nfsVFSStat_offsets_,
      -1,
      -1,
      -1,
      sizeof(nfsVFSStat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsVFSStat, _is_default_instance_));
  nfsBool_descriptor_ = file->message_type(3);
  static const int nfsBool_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, nfs_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_dirname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_pathname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_fs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, fi_open_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, mode_t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, st_rdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, buffer_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, st_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, st_size_),
  };
  nfsBool_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nfsBool_descriptor_,
      nfsBool::default_instance_,
      nfsBool_offsets_,
      -1,
      -1,
      -1,
      sizeof(nfsBool),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsBool, _is_default_instance_));
  nfsDirList_descriptor_ = file->message_type(4);
  static const int nfsDirList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsDirList, nfs_dir_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsDirList, nfs_dir_list_),
  };
  nfsDirList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      nfsDirList_descriptor_,
      nfsDirList::default_instance_,
      nfsDirList_offsets_,
      -1,
      -1,
      -1,
      sizeof(nfsDirList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsDirList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfsDirList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nfs_2dobject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nfsObject_descriptor_, &nfsObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nfsStat_descriptor_, &nfsStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nfsVFSStat_descriptor_, &nfsVFSStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nfsBool_descriptor_, &nfsBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      nfsDirList_descriptor_, &nfsDirList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nfs_2dobject_2eproto() {
  delete nfsObject::default_instance_;
  delete nfsObject_reflection_;
  delete nfsStat::default_instance_;
  delete nfsStat_reflection_;
  delete nfsVFSStat::default_instance_;
  delete nfsVFSStat_reflection_;
  delete nfsBool::default_instance_;
  delete nfsBool_reflection_;
  delete nfsDirList::default_instance_;
  delete nfsDirList_reflection_;
}

void protobuf_AddDesc_nfs_2dobject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020nfs-object.proto\022\003nfs\"\332\001\n\tnfsObject\022\027\n"
    "\017methd_identfier\030\001 \001(\005\022\020\n\010sys_call\030\002 \001(\005"
    "\022\021\n\titem_name\030\003 \001(\t\022\021\n\titem_path\030\004 \001(\t\022\025"
    "\n\ritem_sys_call\030\005 \001(\t\022\016\n\006mode_t\030\006 \001(\003\022\017\n"
    "\007st_rdev\030\007 \001(\003\022\021\n\tname_from\030\010 \001(\t\022\017\n\007nam"
    "e_to\030\t \001(\t\022\017\n\007st_size\030\n \001(\003\022\017\n\007off_set\030\013"
    " \001(\003\"\265\002\n\007nfsStat\022\016\n\006st_dev\030\001 \001(\003\022\016\n\006st_i"
    "no\030\002 \001(\003\022\017\n\007st_mode\030\003 \001(\003\022\020\n\010st_nlink\030\004 "
    "\001(\003\022\016\n\006st_uid\030\005 \001(\003\022\016\n\006st_gid\030\006 \001(\003\022\017\n\007s"
    "t_rdev\030\007 \001(\003\022\017\n\007st_size\030\010 \001(\003\022\022\n\nst_blks"
    "ize\030\t \001(\003\022\021\n\tst_blocks\030\n \001(\003\022\r\n\005mtime\030\013 "
    "\001(\003\022\r\n\005ctime\030\014 \001(\003\022\r\n\005atime\030\r \001(\003\022\027\n\017met"
    "hd_identfier\030\016 \001(\005\022\021\n\titem_name\030\017 \001(\t\022\024\n"
    "\014buffer_space\030\020 \001(\t\022\017\n\007off_set\030\021 \001(\003\"\333\001\n"
    "\nnfsVFSStat\022\017\n\007f_bsize\030\001 \001(\003\022\020\n\010f_frsize"
    "\030\002 \001(\003\022\020\n\010f_blocks\030\003 \001(\003\022\017\n\007f_bfree\030\004 \001("
    "\003\022\020\n\010f_bavail\030\005 \001(\003\022\017\n\007f_files\030\006 \001(\003\022\017\n\007"
    "f_ffree\030\007 \001(\003\022\020\n\010f_favail\030\010 \001(\003\022\016\n\006f_fsi"
    "d\030\t \001(\003\022\016\n\006f_flag\030\n \001(\003\022\021\n\tf_namemax\030\013 \001"
    "(\003\022\016\n\006result\030\014 \001(\005\"\231\002\n\007nfsBool\022\016\n\006result"
    "\030\001 \001(\005\022\036\n\010nfs_stat\030\002 \001(\0132\014.nfs.nfsStat\022\017"
    "\n\007fi_name\030\003 \001(\t\022\022\n\nfi_dirname\030\004 \001(\t\022\023\n\013f"
    "i_pathname\030\005 \001(\t\022\021\n\tfi_offset\030\006 \001(\003\022\r\n\005f"
    "i_fs\030\007 \001(\t\022\020\n\010fi_mount\030\010 \001(\t\022\025\n\rfi_open_"
    "flags\030\t \001(\003\022\016\n\006mode_t\030\n \001(\003\022\017\n\007st_rdev\030\013"
    " \001(\003\022\024\n\014buffer_space\030\014 \001(\t\022\021\n\tst_offset\030"
    "\r \001(\003\022\017\n\007st_size\030\016 \001(\003\":\n\nnfsDirList\022\026\n\016"
    "nfs_dir_result\030\001 \001(\005\022\024\n\014nfs_dir_list\030\002 \003"
    "(\tb\006proto3", 1130);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nfs-object.proto", &protobuf_RegisterTypes);
  nfsObject::default_instance_ = new nfsObject();
  nfsStat::default_instance_ = new nfsStat();
  nfsVFSStat::default_instance_ = new nfsVFSStat();
  nfsBool::default_instance_ = new nfsBool();
  nfsDirList::default_instance_ = new nfsDirList();
  nfsObject::default_instance_->InitAsDefaultInstance();
  nfsStat::default_instance_->InitAsDefaultInstance();
  nfsVFSStat::default_instance_->InitAsDefaultInstance();
  nfsBool::default_instance_->InitAsDefaultInstance();
  nfsDirList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nfs_2dobject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nfs_2dobject_2eproto {
  StaticDescriptorInitializer_nfs_2dobject_2eproto() {
    protobuf_AddDesc_nfs_2dobject_2eproto();
  }
} static_descriptor_initializer_nfs_2dobject_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nfsObject::kMethdIdentfierFieldNumber;
const int nfsObject::kSysCallFieldNumber;
const int nfsObject::kItemNameFieldNumber;
const int nfsObject::kItemPathFieldNumber;
const int nfsObject::kItemSysCallFieldNumber;
const int nfsObject::kModeTFieldNumber;
const int nfsObject::kStRdevFieldNumber;
const int nfsObject::kNameFromFieldNumber;
const int nfsObject::kNameToFieldNumber;
const int nfsObject::kStSizeFieldNumber;
const int nfsObject::kOffSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nfsObject::nfsObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.nfsObject)
}

void nfsObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

nfsObject::nfsObject(const nfsObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.nfsObject)
}

void nfsObject::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  methd_identfier_ = 0;
  sys_call_ = 0;
  item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_sys_call_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_t_ = GOOGLE_LONGLONG(0);
  st_rdev_ = GOOGLE_LONGLONG(0);
  name_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_size_ = GOOGLE_LONGLONG(0);
  off_set_ = GOOGLE_LONGLONG(0);
}

nfsObject::~nfsObject() {
  // @@protoc_insertion_point(destructor:nfs.nfsObject)
  SharedDtor();
}

void nfsObject::SharedDtor() {
  item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_sys_call_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void nfsObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nfsObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nfsObject_descriptor_;
}

const nfsObject& nfsObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_2dobject_2eproto();
  return *default_instance_;
}

nfsObject* nfsObject::default_instance_ = NULL;

nfsObject* nfsObject::New(::google::protobuf::Arena* arena) const {
  nfsObject* n = new nfsObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nfsObject::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<nfsObject*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(methd_identfier_, sys_call_);
  ZR_(mode_t_, st_rdev_);
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_sys_call_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(st_size_, off_set_);
  name_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool nfsObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.nfsObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 methd_identfier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &methd_identfier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sys_call;
        break;
      }

      // optional int32 sys_call = 2;
      case 2: {
        if (tag == 16) {
         parse_sys_call:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_call_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_name;
        break;
      }

      // optional string item_name = 3;
      case 3: {
        if (tag == 26) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsObject.item_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item_path;
        break;
      }

      // optional string item_path = 4;
      case 4: {
        if (tag == 34) {
         parse_item_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_path().data(), this->item_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsObject.item_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item_sys_call;
        break;
      }

      // optional string item_sys_call = 5;
      case 5: {
        if (tag == 42) {
         parse_item_sys_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_sys_call()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_sys_call().data(), this->item_sys_call().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsObject.item_sys_call"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode_t;
        break;
      }

      // optional int64 mode_t = 6;
      case 6: {
        if (tag == 48) {
         parse_mode_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mode_t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_st_rdev;
        break;
      }

      // optional int64 st_rdev = 7;
      case 7: {
        if (tag == 56) {
         parse_st_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_rdev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_name_from;
        break;
      }

      // optional string name_from = 8;
      case 8: {
        if (tag == 66) {
         parse_name_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name_from().data(), this->name_from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsObject.name_from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name_to;
        break;
      }

      // optional string name_to = 9;
      case 9: {
        if (tag == 74) {
         parse_name_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name_to().data(), this->name_to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsObject.name_to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_st_size;
        break;
      }

      // optional int64 st_size = 10;
      case 10: {
        if (tag == 80) {
         parse_st_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_off_set;
        break;
      }

      // optional int64 off_set = 11;
      case 11: {
        if (tag == 88) {
         parse_off_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &off_set_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.nfsObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.nfsObject)
  return false;
#undef DO_
}

void nfsObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.nfsObject)
  // optional int32 methd_identfier = 1;
  if (this->methd_identfier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->methd_identfier(), output);
  }

  // optional int32 sys_call = 2;
  if (this->sys_call() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sys_call(), output);
  }

  // optional string item_name = 3;
  if (this->item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item_name(), output);
  }

  // optional string item_path = 4;
  if (this->item_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_path().data(), this->item_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.item_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->item_path(), output);
  }

  // optional string item_sys_call = 5;
  if (this->item_sys_call().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_sys_call().data(), this->item_sys_call().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.item_sys_call");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->item_sys_call(), output);
  }

  // optional int64 mode_t = 6;
  if (this->mode_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mode_t(), output);
  }

  // optional int64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->st_rdev(), output);
  }

  // optional string name_from = 8;
  if (this->name_from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_from().data(), this->name_from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.name_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name_from(), output);
  }

  // optional string name_to = 9;
  if (this->name_to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_to().data(), this->name_to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.name_to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name_to(), output);
  }

  // optional int64 st_size = 10;
  if (this->st_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->st_size(), output);
  }

  // optional int64 off_set = 11;
  if (this->off_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->off_set(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.nfsObject)
}

::google::protobuf::uint8* nfsObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.nfsObject)
  // optional int32 methd_identfier = 1;
  if (this->methd_identfier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->methd_identfier(), target);
  }

  // optional int32 sys_call = 2;
  if (this->sys_call() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sys_call(), target);
  }

  // optional string item_name = 3;
  if (this->item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_name(), target);
  }

  // optional string item_path = 4;
  if (this->item_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_path().data(), this->item_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.item_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->item_path(), target);
  }

  // optional string item_sys_call = 5;
  if (this->item_sys_call().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_sys_call().data(), this->item_sys_call().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.item_sys_call");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->item_sys_call(), target);
  }

  // optional int64 mode_t = 6;
  if (this->mode_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mode_t(), target);
  }

  // optional int64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->st_rdev(), target);
  }

  // optional string name_from = 8;
  if (this->name_from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_from().data(), this->name_from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.name_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name_from(), target);
  }

  // optional string name_to = 9;
  if (this->name_to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name_to().data(), this->name_to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsObject.name_to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name_to(), target);
  }

  // optional int64 st_size = 10;
  if (this->st_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->st_size(), target);
  }

  // optional int64 off_set = 11;
  if (this->off_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->off_set(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.nfsObject)
  return target;
}

int nfsObject::ByteSize() const {
  int total_size = 0;

  // optional int32 methd_identfier = 1;
  if (this->methd_identfier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->methd_identfier());
  }

  // optional int32 sys_call = 2;
  if (this->sys_call() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sys_call());
  }

  // optional string item_name = 3;
  if (this->item_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_name());
  }

  // optional string item_path = 4;
  if (this->item_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_path());
  }

  // optional string item_sys_call = 5;
  if (this->item_sys_call().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_sys_call());
  }

  // optional int64 mode_t = 6;
  if (this->mode_t() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mode_t());
  }

  // optional int64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_rdev());
  }

  // optional string name_from = 8;
  if (this->name_from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_from());
  }

  // optional string name_to = 9;
  if (this->name_to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name_to());
  }

  // optional int64 st_size = 10;
  if (this->st_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_size());
  }

  // optional int64 off_set = 11;
  if (this->off_set() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->off_set());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nfsObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nfsObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nfsObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nfsObject::MergeFrom(const nfsObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.methd_identfier() != 0) {
    set_methd_identfier(from.methd_identfier());
  }
  if (from.sys_call() != 0) {
    set_sys_call(from.sys_call());
  }
  if (from.item_name().size() > 0) {

    item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_);
  }
  if (from.item_path().size() > 0) {

    item_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_path_);
  }
  if (from.item_sys_call().size() > 0) {

    item_sys_call_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_sys_call_);
  }
  if (from.mode_t() != 0) {
    set_mode_t(from.mode_t());
  }
  if (from.st_rdev() != 0) {
    set_st_rdev(from.st_rdev());
  }
  if (from.name_from().size() > 0) {

    name_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_from_);
  }
  if (from.name_to().size() > 0) {

    name_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_to_);
  }
  if (from.st_size() != 0) {
    set_st_size(from.st_size());
  }
  if (from.off_set() != 0) {
    set_off_set(from.off_set());
  }
}

void nfsObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nfsObject::CopyFrom(const nfsObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nfsObject::IsInitialized() const {

  return true;
}

void nfsObject::Swap(nfsObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nfsObject::InternalSwap(nfsObject* other) {
  std::swap(methd_identfier_, other->methd_identfier_);
  std::swap(sys_call_, other->sys_call_);
  item_name_.Swap(&other->item_name_);
  item_path_.Swap(&other->item_path_);
  item_sys_call_.Swap(&other->item_sys_call_);
  std::swap(mode_t_, other->mode_t_);
  std::swap(st_rdev_, other->st_rdev_);
  name_from_.Swap(&other->name_from_);
  name_to_.Swap(&other->name_to_);
  std::swap(st_size_, other->st_size_);
  std::swap(off_set_, other->off_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nfsObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nfsObject_descriptor_;
  metadata.reflection = nfsObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nfsObject

// optional int32 methd_identfier = 1;
void nfsObject::clear_methd_identfier() {
  methd_identfier_ = 0;
}
 ::google::protobuf::int32 nfsObject::methd_identfier() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.methd_identfier)
  return methd_identfier_;
}
 void nfsObject::set_methd_identfier(::google::protobuf::int32 value) {
  
  methd_identfier_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.methd_identfier)
}

// optional int32 sys_call = 2;
void nfsObject::clear_sys_call() {
  sys_call_ = 0;
}
 ::google::protobuf::int32 nfsObject::sys_call() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.sys_call)
  return sys_call_;
}
 void nfsObject::set_sys_call(::google::protobuf::int32 value) {
  
  sys_call_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.sys_call)
}

// optional string item_name = 3;
void nfsObject::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsObject::item_name() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.item_name)
  return item_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_item_name(const ::std::string& value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.item_name)
}
 void nfsObject::set_item_name(const char* value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.item_name)
}
 void nfsObject::set_item_name(const char* value, size_t size) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.item_name)
}
 ::std::string* nfsObject::mutable_item_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsObject::release_item_name() {
  
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    
  } else {
    
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.item_name)
}

// optional string item_path = 4;
void nfsObject::clear_item_path() {
  item_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsObject::item_path() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.item_path)
  return item_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_item_path(const ::std::string& value) {
  
  item_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.item_path)
}
 void nfsObject::set_item_path(const char* value) {
  
  item_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.item_path)
}
 void nfsObject::set_item_path(const char* value, size_t size) {
  
  item_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.item_path)
}
 ::std::string* nfsObject::mutable_item_path() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.item_path)
  return item_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsObject::release_item_path() {
  
  return item_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_allocated_item_path(::std::string* item_path) {
  if (item_path != NULL) {
    
  } else {
    
  }
  item_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_path);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.item_path)
}

// optional string item_sys_call = 5;
void nfsObject::clear_item_sys_call() {
  item_sys_call_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsObject::item_sys_call() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.item_sys_call)
  return item_sys_call_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_item_sys_call(const ::std::string& value) {
  
  item_sys_call_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.item_sys_call)
}
 void nfsObject::set_item_sys_call(const char* value) {
  
  item_sys_call_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.item_sys_call)
}
 void nfsObject::set_item_sys_call(const char* value, size_t size) {
  
  item_sys_call_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.item_sys_call)
}
 ::std::string* nfsObject::mutable_item_sys_call() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.item_sys_call)
  return item_sys_call_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsObject::release_item_sys_call() {
  
  return item_sys_call_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_allocated_item_sys_call(::std::string* item_sys_call) {
  if (item_sys_call != NULL) {
    
  } else {
    
  }
  item_sys_call_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_sys_call);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.item_sys_call)
}

// optional int64 mode_t = 6;
void nfsObject::clear_mode_t() {
  mode_t_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsObject::mode_t() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.mode_t)
  return mode_t_;
}
 void nfsObject::set_mode_t(::google::protobuf::int64 value) {
  
  mode_t_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.mode_t)
}

// optional int64 st_rdev = 7;
void nfsObject::clear_st_rdev() {
  st_rdev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsObject::st_rdev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.st_rdev)
  return st_rdev_;
}
 void nfsObject::set_st_rdev(::google::protobuf::int64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.st_rdev)
}

// optional string name_from = 8;
void nfsObject::clear_name_from() {
  name_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsObject::name_from() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.name_from)
  return name_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_name_from(const ::std::string& value) {
  
  name_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.name_from)
}
 void nfsObject::set_name_from(const char* value) {
  
  name_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.name_from)
}
 void nfsObject::set_name_from(const char* value, size_t size) {
  
  name_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.name_from)
}
 ::std::string* nfsObject::mutable_name_from() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.name_from)
  return name_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsObject::release_name_from() {
  
  return name_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_allocated_name_from(::std::string* name_from) {
  if (name_from != NULL) {
    
  } else {
    
  }
  name_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_from);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.name_from)
}

// optional string name_to = 9;
void nfsObject::clear_name_to() {
  name_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsObject::name_to() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.name_to)
  return name_to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_name_to(const ::std::string& value) {
  
  name_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsObject.name_to)
}
 void nfsObject::set_name_to(const char* value) {
  
  name_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsObject.name_to)
}
 void nfsObject::set_name_to(const char* value, size_t size) {
  
  name_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsObject.name_to)
}
 ::std::string* nfsObject::mutable_name_to() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsObject.name_to)
  return name_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsObject::release_name_to() {
  
  return name_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsObject::set_allocated_name_to(::std::string* name_to) {
  if (name_to != NULL) {
    
  } else {
    
  }
  name_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsObject.name_to)
}

// optional int64 st_size = 10;
void nfsObject::clear_st_size() {
  st_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsObject::st_size() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.st_size)
  return st_size_;
}
 void nfsObject::set_st_size(::google::protobuf::int64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.st_size)
}

// optional int64 off_set = 11;
void nfsObject::clear_off_set() {
  off_set_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsObject::off_set() const {
  // @@protoc_insertion_point(field_get:nfs.nfsObject.off_set)
  return off_set_;
}
 void nfsObject::set_off_set(::google::protobuf::int64 value) {
  
  off_set_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsObject.off_set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nfsStat::kStDevFieldNumber;
const int nfsStat::kStInoFieldNumber;
const int nfsStat::kStModeFieldNumber;
const int nfsStat::kStNlinkFieldNumber;
const int nfsStat::kStUidFieldNumber;
const int nfsStat::kStGidFieldNumber;
const int nfsStat::kStRdevFieldNumber;
const int nfsStat::kStSizeFieldNumber;
const int nfsStat::kStBlksizeFieldNumber;
const int nfsStat::kStBlocksFieldNumber;
const int nfsStat::kMtimeFieldNumber;
const int nfsStat::kCtimeFieldNumber;
const int nfsStat::kAtimeFieldNumber;
const int nfsStat::kMethdIdentfierFieldNumber;
const int nfsStat::kItemNameFieldNumber;
const int nfsStat::kBufferSpaceFieldNumber;
const int nfsStat::kOffSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nfsStat::nfsStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.nfsStat)
}

void nfsStat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

nfsStat::nfsStat(const nfsStat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.nfsStat)
}

void nfsStat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  st_dev_ = GOOGLE_LONGLONG(0);
  st_ino_ = GOOGLE_LONGLONG(0);
  st_mode_ = GOOGLE_LONGLONG(0);
  st_nlink_ = GOOGLE_LONGLONG(0);
  st_uid_ = GOOGLE_LONGLONG(0);
  st_gid_ = GOOGLE_LONGLONG(0);
  st_rdev_ = GOOGLE_LONGLONG(0);
  st_size_ = GOOGLE_LONGLONG(0);
  st_blksize_ = GOOGLE_LONGLONG(0);
  st_blocks_ = GOOGLE_LONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  ctime_ = GOOGLE_LONGLONG(0);
  atime_ = GOOGLE_LONGLONG(0);
  methd_identfier_ = 0;
  item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  off_set_ = GOOGLE_LONGLONG(0);
}

nfsStat::~nfsStat() {
  // @@protoc_insertion_point(destructor:nfs.nfsStat)
  SharedDtor();
}

void nfsStat::SharedDtor() {
  item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void nfsStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nfsStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nfsStat_descriptor_;
}

const nfsStat& nfsStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_2dobject_2eproto();
  return *default_instance_;
}

nfsStat* nfsStat::default_instance_ = NULL;

nfsStat* nfsStat::New(::google::protobuf::Arena* arena) const {
  nfsStat* n = new nfsStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nfsStat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<nfsStat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(st_dev_, st_size_);
  ZR_(st_blksize_, atime_);
  methd_identfier_ = 0;
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  off_set_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool nfsStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.nfsStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 st_dev = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_dev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_st_ino;
        break;
      }

      // optional int64 st_ino = 2;
      case 2: {
        if (tag == 16) {
         parse_st_ino:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_ino_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_st_mode;
        break;
      }

      // optional int64 st_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_st_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_mode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_st_nlink;
        break;
      }

      // optional int64 st_nlink = 4;
      case 4: {
        if (tag == 32) {
         parse_st_nlink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_nlink_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_st_uid;
        break;
      }

      // optional int64 st_uid = 5;
      case 5: {
        if (tag == 40) {
         parse_st_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_st_gid;
        break;
      }

      // optional int64 st_gid = 6;
      case 6: {
        if (tag == 48) {
         parse_st_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_gid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_st_rdev;
        break;
      }

      // optional int64 st_rdev = 7;
      case 7: {
        if (tag == 56) {
         parse_st_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_rdev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_st_size;
        break;
      }

      // optional int64 st_size = 8;
      case 8: {
        if (tag == 64) {
         parse_st_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_st_blksize;
        break;
      }

      // optional int64 st_blksize = 9;
      case 9: {
        if (tag == 72) {
         parse_st_blksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_blksize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_st_blocks;
        break;
      }

      // optional int64 st_blocks = 10;
      case 10: {
        if (tag == 80) {
         parse_st_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_blocks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mtime;
        break;
      }

      // optional int64 mtime = 11;
      case 11: {
        if (tag == 88) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 12;
      case 12: {
        if (tag == 96) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_atime;
        break;
      }

      // optional int64 atime = 13;
      case 13: {
        if (tag == 104) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_methd_identfier;
        break;
      }

      // optional int32 methd_identfier = 14;
      case 14: {
        if (tag == 112) {
         parse_methd_identfier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &methd_identfier_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_item_name;
        break;
      }

      // optional string item_name = 15;
      case 15: {
        if (tag == 122) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsStat.item_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_buffer_space;
        break;
      }

      // optional string buffer_space = 16;
      case 16: {
        if (tag == 130) {
         parse_buffer_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buffer_space().data(), this->buffer_space().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsStat.buffer_space"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_off_set;
        break;
      }

      // optional int64 off_set = 17;
      case 17: {
        if (tag == 136) {
         parse_off_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &off_set_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.nfsStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.nfsStat)
  return false;
#undef DO_
}

void nfsStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.nfsStat)
  // optional int64 st_dev = 1;
  if (this->st_dev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->st_dev(), output);
  }

  // optional int64 st_ino = 2;
  if (this->st_ino() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->st_ino(), output);
  }

  // optional int64 st_mode = 3;
  if (this->st_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->st_mode(), output);
  }

  // optional int64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->st_nlink(), output);
  }

  // optional int64 st_uid = 5;
  if (this->st_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->st_uid(), output);
  }

  // optional int64 st_gid = 6;
  if (this->st_gid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->st_gid(), output);
  }

  // optional int64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->st_rdev(), output);
  }

  // optional int64 st_size = 8;
  if (this->st_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->st_size(), output);
  }

  // optional int64 st_blksize = 9;
  if (this->st_blksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->st_blksize(), output);
  }

  // optional int64 st_blocks = 10;
  if (this->st_blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->st_blocks(), output);
  }

  // optional int64 mtime = 11;
  if (this->mtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mtime(), output);
  }

  // optional int64 ctime = 12;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->ctime(), output);
  }

  // optional int64 atime = 13;
  if (this->atime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->atime(), output);
  }

  // optional int32 methd_identfier = 14;
  if (this->methd_identfier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->methd_identfier(), output);
  }

  // optional string item_name = 15;
  if (this->item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsStat.item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->item_name(), output);
  }

  // optional string buffer_space = 16;
  if (this->buffer_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buffer_space().data(), this->buffer_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsStat.buffer_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->buffer_space(), output);
  }

  // optional int64 off_set = 17;
  if (this->off_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->off_set(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.nfsStat)
}

::google::protobuf::uint8* nfsStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.nfsStat)
  // optional int64 st_dev = 1;
  if (this->st_dev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->st_dev(), target);
  }

  // optional int64 st_ino = 2;
  if (this->st_ino() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->st_ino(), target);
  }

  // optional int64 st_mode = 3;
  if (this->st_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->st_mode(), target);
  }

  // optional int64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->st_nlink(), target);
  }

  // optional int64 st_uid = 5;
  if (this->st_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->st_uid(), target);
  }

  // optional int64 st_gid = 6;
  if (this->st_gid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->st_gid(), target);
  }

  // optional int64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->st_rdev(), target);
  }

  // optional int64 st_size = 8;
  if (this->st_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->st_size(), target);
  }

  // optional int64 st_blksize = 9;
  if (this->st_blksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->st_blksize(), target);
  }

  // optional int64 st_blocks = 10;
  if (this->st_blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->st_blocks(), target);
  }

  // optional int64 mtime = 11;
  if (this->mtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mtime(), target);
  }

  // optional int64 ctime = 12;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->ctime(), target);
  }

  // optional int64 atime = 13;
  if (this->atime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->atime(), target);
  }

  // optional int32 methd_identfier = 14;
  if (this->methd_identfier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->methd_identfier(), target);
  }

  // optional string item_name = 15;
  if (this->item_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsStat.item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->item_name(), target);
  }

  // optional string buffer_space = 16;
  if (this->buffer_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buffer_space().data(), this->buffer_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsStat.buffer_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->buffer_space(), target);
  }

  // optional int64 off_set = 17;
  if (this->off_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->off_set(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.nfsStat)
  return target;
}

int nfsStat::ByteSize() const {
  int total_size = 0;

  // optional int64 st_dev = 1;
  if (this->st_dev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_dev());
  }

  // optional int64 st_ino = 2;
  if (this->st_ino() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_ino());
  }

  // optional int64 st_mode = 3;
  if (this->st_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_mode());
  }

  // optional int64 st_nlink = 4;
  if (this->st_nlink() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_nlink());
  }

  // optional int64 st_uid = 5;
  if (this->st_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_uid());
  }

  // optional int64 st_gid = 6;
  if (this->st_gid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_gid());
  }

  // optional int64 st_rdev = 7;
  if (this->st_rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_rdev());
  }

  // optional int64 st_size = 8;
  if (this->st_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_size());
  }

  // optional int64 st_blksize = 9;
  if (this->st_blksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_blksize());
  }

  // optional int64 st_blocks = 10;
  if (this->st_blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_blocks());
  }

  // optional int64 mtime = 11;
  if (this->mtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mtime());
  }

  // optional int64 ctime = 12;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctime());
  }

  // optional int64 atime = 13;
  if (this->atime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->atime());
  }

  // optional int32 methd_identfier = 14;
  if (this->methd_identfier() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->methd_identfier());
  }

  // optional string item_name = 15;
  if (this->item_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_name());
  }

  // optional string buffer_space = 16;
  if (this->buffer_space().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buffer_space());
  }

  // optional int64 off_set = 17;
  if (this->off_set() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->off_set());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nfsStat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nfsStat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nfsStat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nfsStat::MergeFrom(const nfsStat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.st_dev() != 0) {
    set_st_dev(from.st_dev());
  }
  if (from.st_ino() != 0) {
    set_st_ino(from.st_ino());
  }
  if (from.st_mode() != 0) {
    set_st_mode(from.st_mode());
  }
  if (from.st_nlink() != 0) {
    set_st_nlink(from.st_nlink());
  }
  if (from.st_uid() != 0) {
    set_st_uid(from.st_uid());
  }
  if (from.st_gid() != 0) {
    set_st_gid(from.st_gid());
  }
  if (from.st_rdev() != 0) {
    set_st_rdev(from.st_rdev());
  }
  if (from.st_size() != 0) {
    set_st_size(from.st_size());
  }
  if (from.st_blksize() != 0) {
    set_st_blksize(from.st_blksize());
  }
  if (from.st_blocks() != 0) {
    set_st_blocks(from.st_blocks());
  }
  if (from.mtime() != 0) {
    set_mtime(from.mtime());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
  if (from.atime() != 0) {
    set_atime(from.atime());
  }
  if (from.methd_identfier() != 0) {
    set_methd_identfier(from.methd_identfier());
  }
  if (from.item_name().size() > 0) {

    item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_);
  }
  if (from.buffer_space().size() > 0) {

    buffer_space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_space_);
  }
  if (from.off_set() != 0) {
    set_off_set(from.off_set());
  }
}

void nfsStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nfsStat::CopyFrom(const nfsStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nfsStat::IsInitialized() const {

  return true;
}

void nfsStat::Swap(nfsStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nfsStat::InternalSwap(nfsStat* other) {
  std::swap(st_dev_, other->st_dev_);
  std::swap(st_ino_, other->st_ino_);
  std::swap(st_mode_, other->st_mode_);
  std::swap(st_nlink_, other->st_nlink_);
  std::swap(st_uid_, other->st_uid_);
  std::swap(st_gid_, other->st_gid_);
  std::swap(st_rdev_, other->st_rdev_);
  std::swap(st_size_, other->st_size_);
  std::swap(st_blksize_, other->st_blksize_);
  std::swap(st_blocks_, other->st_blocks_);
  std::swap(mtime_, other->mtime_);
  std::swap(ctime_, other->ctime_);
  std::swap(atime_, other->atime_);
  std::swap(methd_identfier_, other->methd_identfier_);
  item_name_.Swap(&other->item_name_);
  buffer_space_.Swap(&other->buffer_space_);
  std::swap(off_set_, other->off_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nfsStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nfsStat_descriptor_;
  metadata.reflection = nfsStat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nfsStat

// optional int64 st_dev = 1;
void nfsStat::clear_st_dev() {
  st_dev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_dev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_dev)
  return st_dev_;
}
 void nfsStat::set_st_dev(::google::protobuf::int64 value) {
  
  st_dev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_dev)
}

// optional int64 st_ino = 2;
void nfsStat::clear_st_ino() {
  st_ino_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_ino() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_ino)
  return st_ino_;
}
 void nfsStat::set_st_ino(::google::protobuf::int64 value) {
  
  st_ino_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_ino)
}

// optional int64 st_mode = 3;
void nfsStat::clear_st_mode() {
  st_mode_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_mode() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_mode)
  return st_mode_;
}
 void nfsStat::set_st_mode(::google::protobuf::int64 value) {
  
  st_mode_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_mode)
}

// optional int64 st_nlink = 4;
void nfsStat::clear_st_nlink() {
  st_nlink_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_nlink() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_nlink)
  return st_nlink_;
}
 void nfsStat::set_st_nlink(::google::protobuf::int64 value) {
  
  st_nlink_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_nlink)
}

// optional int64 st_uid = 5;
void nfsStat::clear_st_uid() {
  st_uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_uid() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_uid)
  return st_uid_;
}
 void nfsStat::set_st_uid(::google::protobuf::int64 value) {
  
  st_uid_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_uid)
}

// optional int64 st_gid = 6;
void nfsStat::clear_st_gid() {
  st_gid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_gid() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_gid)
  return st_gid_;
}
 void nfsStat::set_st_gid(::google::protobuf::int64 value) {
  
  st_gid_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_gid)
}

// optional int64 st_rdev = 7;
void nfsStat::clear_st_rdev() {
  st_rdev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_rdev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_rdev)
  return st_rdev_;
}
 void nfsStat::set_st_rdev(::google::protobuf::int64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_rdev)
}

// optional int64 st_size = 8;
void nfsStat::clear_st_size() {
  st_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_size() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_size)
  return st_size_;
}
 void nfsStat::set_st_size(::google::protobuf::int64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_size)
}

// optional int64 st_blksize = 9;
void nfsStat::clear_st_blksize() {
  st_blksize_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_blksize() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_blksize)
  return st_blksize_;
}
 void nfsStat::set_st_blksize(::google::protobuf::int64 value) {
  
  st_blksize_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_blksize)
}

// optional int64 st_blocks = 10;
void nfsStat::clear_st_blocks() {
  st_blocks_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::st_blocks() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.st_blocks)
  return st_blocks_;
}
 void nfsStat::set_st_blocks(::google::protobuf::int64 value) {
  
  st_blocks_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.st_blocks)
}

// optional int64 mtime = 11;
void nfsStat::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::mtime() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.mtime)
  return mtime_;
}
 void nfsStat::set_mtime(::google::protobuf::int64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.mtime)
}

// optional int64 ctime = 12;
void nfsStat::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::ctime() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.ctime)
  return ctime_;
}
 void nfsStat::set_ctime(::google::protobuf::int64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.ctime)
}

// optional int64 atime = 13;
void nfsStat::clear_atime() {
  atime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::atime() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.atime)
  return atime_;
}
 void nfsStat::set_atime(::google::protobuf::int64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.atime)
}

// optional int32 methd_identfier = 14;
void nfsStat::clear_methd_identfier() {
  methd_identfier_ = 0;
}
 ::google::protobuf::int32 nfsStat::methd_identfier() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.methd_identfier)
  return methd_identfier_;
}
 void nfsStat::set_methd_identfier(::google::protobuf::int32 value) {
  
  methd_identfier_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.methd_identfier)
}

// optional string item_name = 15;
void nfsStat::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsStat::item_name() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.item_name)
  return item_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsStat::set_item_name(const ::std::string& value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsStat.item_name)
}
 void nfsStat::set_item_name(const char* value) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsStat.item_name)
}
 void nfsStat::set_item_name(const char* value, size_t size) {
  
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsStat.item_name)
}
 ::std::string* nfsStat::mutable_item_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsStat.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsStat::release_item_name() {
  
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsStat::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    
  } else {
    
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsStat.item_name)
}

// optional string buffer_space = 16;
void nfsStat::clear_buffer_space() {
  buffer_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsStat::buffer_space() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.buffer_space)
  return buffer_space_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsStat::set_buffer_space(const ::std::string& value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsStat.buffer_space)
}
 void nfsStat::set_buffer_space(const char* value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsStat.buffer_space)
}
 void nfsStat::set_buffer_space(const char* value, size_t size) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsStat.buffer_space)
}
 ::std::string* nfsStat::mutable_buffer_space() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsStat.buffer_space)
  return buffer_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsStat::release_buffer_space() {
  
  return buffer_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsStat::set_allocated_buffer_space(::std::string* buffer_space) {
  if (buffer_space != NULL) {
    
  } else {
    
  }
  buffer_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer_space);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsStat.buffer_space)
}

// optional int64 off_set = 17;
void nfsStat::clear_off_set() {
  off_set_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsStat::off_set() const {
  // @@protoc_insertion_point(field_get:nfs.nfsStat.off_set)
  return off_set_;
}
 void nfsStat::set_off_set(::google::protobuf::int64 value) {
  
  off_set_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsStat.off_set)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nfsVFSStat::kFBsizeFieldNumber;
const int nfsVFSStat::kFFrsizeFieldNumber;
const int nfsVFSStat::kFBlocksFieldNumber;
const int nfsVFSStat::kFBfreeFieldNumber;
const int nfsVFSStat::kFBavailFieldNumber;
const int nfsVFSStat::kFFilesFieldNumber;
const int nfsVFSStat::kFFfreeFieldNumber;
const int nfsVFSStat::kFFavailFieldNumber;
const int nfsVFSStat::kFFsidFieldNumber;
const int nfsVFSStat::kFFlagFieldNumber;
const int nfsVFSStat::kFNamemaxFieldNumber;
const int nfsVFSStat::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nfsVFSStat::nfsVFSStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.nfsVFSStat)
}

void nfsVFSStat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

nfsVFSStat::nfsVFSStat(const nfsVFSStat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.nfsVFSStat)
}

void nfsVFSStat::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  f_bsize_ = GOOGLE_LONGLONG(0);
  f_frsize_ = GOOGLE_LONGLONG(0);
  f_blocks_ = GOOGLE_LONGLONG(0);
  f_bfree_ = GOOGLE_LONGLONG(0);
  f_bavail_ = GOOGLE_LONGLONG(0);
  f_files_ = GOOGLE_LONGLONG(0);
  f_ffree_ = GOOGLE_LONGLONG(0);
  f_favail_ = GOOGLE_LONGLONG(0);
  f_fsid_ = GOOGLE_LONGLONG(0);
  f_flag_ = GOOGLE_LONGLONG(0);
  f_namemax_ = GOOGLE_LONGLONG(0);
  result_ = 0;
}

nfsVFSStat::~nfsVFSStat() {
  // @@protoc_insertion_point(destructor:nfs.nfsVFSStat)
  SharedDtor();
}

void nfsVFSStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nfsVFSStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nfsVFSStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nfsVFSStat_descriptor_;
}

const nfsVFSStat& nfsVFSStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_2dobject_2eproto();
  return *default_instance_;
}

nfsVFSStat* nfsVFSStat::default_instance_ = NULL;

nfsVFSStat* nfsVFSStat::New(::google::protobuf::Arena* arena) const {
  nfsVFSStat* n = new nfsVFSStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nfsVFSStat::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<nfsVFSStat*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(f_bsize_, f_favail_);
  ZR_(f_fsid_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool nfsVFSStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.nfsVFSStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 f_bsize = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_bsize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_frsize;
        break;
      }

      // optional int64 f_frsize = 2;
      case 2: {
        if (tag == 16) {
         parse_f_frsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_frsize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_f_blocks;
        break;
      }

      // optional int64 f_blocks = 3;
      case 3: {
        if (tag == 24) {
         parse_f_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_blocks_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_f_bfree;
        break;
      }

      // optional int64 f_bfree = 4;
      case 4: {
        if (tag == 32) {
         parse_f_bfree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_bfree_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_f_bavail;
        break;
      }

      // optional int64 f_bavail = 5;
      case 5: {
        if (tag == 40) {
         parse_f_bavail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_bavail_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_f_files;
        break;
      }

      // optional int64 f_files = 6;
      case 6: {
        if (tag == 48) {
         parse_f_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_files_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_f_ffree;
        break;
      }

      // optional int64 f_ffree = 7;
      case 7: {
        if (tag == 56) {
         parse_f_ffree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_ffree_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_f_favail;
        break;
      }

      // optional int64 f_favail = 8;
      case 8: {
        if (tag == 64) {
         parse_f_favail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_favail_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_f_fsid;
        break;
      }

      // optional int64 f_fsid = 9;
      case 9: {
        if (tag == 72) {
         parse_f_fsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_fsid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_f_flag;
        break;
      }

      // optional int64 f_flag = 10;
      case 10: {
        if (tag == 80) {
         parse_f_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_flag_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_f_namemax;
        break;
      }

      // optional int64 f_namemax = 11;
      case 11: {
        if (tag == 88) {
         parse_f_namemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &f_namemax_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_result;
        break;
      }

      // optional int32 result = 12;
      case 12: {
        if (tag == 96) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.nfsVFSStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.nfsVFSStat)
  return false;
#undef DO_
}

void nfsVFSStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.nfsVFSStat)
  // optional int64 f_bsize = 1;
  if (this->f_bsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->f_bsize(), output);
  }

  // optional int64 f_frsize = 2;
  if (this->f_frsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->f_frsize(), output);
  }

  // optional int64 f_blocks = 3;
  if (this->f_blocks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->f_blocks(), output);
  }

  // optional int64 f_bfree = 4;
  if (this->f_bfree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->f_bfree(), output);
  }

  // optional int64 f_bavail = 5;
  if (this->f_bavail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->f_bavail(), output);
  }

  // optional int64 f_files = 6;
  if (this->f_files() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->f_files(), output);
  }

  // optional int64 f_ffree = 7;
  if (this->f_ffree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->f_ffree(), output);
  }

  // optional int64 f_favail = 8;
  if (this->f_favail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->f_favail(), output);
  }

  // optional int64 f_fsid = 9;
  if (this->f_fsid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->f_fsid(), output);
  }

  // optional int64 f_flag = 10;
  if (this->f_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->f_flag(), output);
  }

  // optional int64 f_namemax = 11;
  if (this->f_namemax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->f_namemax(), output);
  }

  // optional int32 result = 12;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.nfsVFSStat)
}

::google::protobuf::uint8* nfsVFSStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.nfsVFSStat)
  // optional int64 f_bsize = 1;
  if (this->f_bsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->f_bsize(), target);
  }

  // optional int64 f_frsize = 2;
  if (this->f_frsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->f_frsize(), target);
  }

  // optional int64 f_blocks = 3;
  if (this->f_blocks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->f_blocks(), target);
  }

  // optional int64 f_bfree = 4;
  if (this->f_bfree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->f_bfree(), target);
  }

  // optional int64 f_bavail = 5;
  if (this->f_bavail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->f_bavail(), target);
  }

  // optional int64 f_files = 6;
  if (this->f_files() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->f_files(), target);
  }

  // optional int64 f_ffree = 7;
  if (this->f_ffree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->f_ffree(), target);
  }

  // optional int64 f_favail = 8;
  if (this->f_favail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->f_favail(), target);
  }

  // optional int64 f_fsid = 9;
  if (this->f_fsid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->f_fsid(), target);
  }

  // optional int64 f_flag = 10;
  if (this->f_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->f_flag(), target);
  }

  // optional int64 f_namemax = 11;
  if (this->f_namemax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->f_namemax(), target);
  }

  // optional int32 result = 12;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.nfsVFSStat)
  return target;
}

int nfsVFSStat::ByteSize() const {
  int total_size = 0;

  // optional int64 f_bsize = 1;
  if (this->f_bsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_bsize());
  }

  // optional int64 f_frsize = 2;
  if (this->f_frsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_frsize());
  }

  // optional int64 f_blocks = 3;
  if (this->f_blocks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_blocks());
  }

  // optional int64 f_bfree = 4;
  if (this->f_bfree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_bfree());
  }

  // optional int64 f_bavail = 5;
  if (this->f_bavail() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_bavail());
  }

  // optional int64 f_files = 6;
  if (this->f_files() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_files());
  }

  // optional int64 f_ffree = 7;
  if (this->f_ffree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_ffree());
  }

  // optional int64 f_favail = 8;
  if (this->f_favail() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_favail());
  }

  // optional int64 f_fsid = 9;
  if (this->f_fsid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_fsid());
  }

  // optional int64 f_flag = 10;
  if (this->f_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_flag());
  }

  // optional int64 f_namemax = 11;
  if (this->f_namemax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->f_namemax());
  }

  // optional int32 result = 12;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nfsVFSStat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nfsVFSStat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nfsVFSStat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nfsVFSStat::MergeFrom(const nfsVFSStat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.f_bsize() != 0) {
    set_f_bsize(from.f_bsize());
  }
  if (from.f_frsize() != 0) {
    set_f_frsize(from.f_frsize());
  }
  if (from.f_blocks() != 0) {
    set_f_blocks(from.f_blocks());
  }
  if (from.f_bfree() != 0) {
    set_f_bfree(from.f_bfree());
  }
  if (from.f_bavail() != 0) {
    set_f_bavail(from.f_bavail());
  }
  if (from.f_files() != 0) {
    set_f_files(from.f_files());
  }
  if (from.f_ffree() != 0) {
    set_f_ffree(from.f_ffree());
  }
  if (from.f_favail() != 0) {
    set_f_favail(from.f_favail());
  }
  if (from.f_fsid() != 0) {
    set_f_fsid(from.f_fsid());
  }
  if (from.f_flag() != 0) {
    set_f_flag(from.f_flag());
  }
  if (from.f_namemax() != 0) {
    set_f_namemax(from.f_namemax());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void nfsVFSStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nfsVFSStat::CopyFrom(const nfsVFSStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nfsVFSStat::IsInitialized() const {

  return true;
}

void nfsVFSStat::Swap(nfsVFSStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nfsVFSStat::InternalSwap(nfsVFSStat* other) {
  std::swap(f_bsize_, other->f_bsize_);
  std::swap(f_frsize_, other->f_frsize_);
  std::swap(f_blocks_, other->f_blocks_);
  std::swap(f_bfree_, other->f_bfree_);
  std::swap(f_bavail_, other->f_bavail_);
  std::swap(f_files_, other->f_files_);
  std::swap(f_ffree_, other->f_ffree_);
  std::swap(f_favail_, other->f_favail_);
  std::swap(f_fsid_, other->f_fsid_);
  std::swap(f_flag_, other->f_flag_);
  std::swap(f_namemax_, other->f_namemax_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nfsVFSStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nfsVFSStat_descriptor_;
  metadata.reflection = nfsVFSStat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nfsVFSStat

// optional int64 f_bsize = 1;
void nfsVFSStat::clear_f_bsize() {
  f_bsize_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_bsize() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_bsize)
  return f_bsize_;
}
 void nfsVFSStat::set_f_bsize(::google::protobuf::int64 value) {
  
  f_bsize_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_bsize)
}

// optional int64 f_frsize = 2;
void nfsVFSStat::clear_f_frsize() {
  f_frsize_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_frsize() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_frsize)
  return f_frsize_;
}
 void nfsVFSStat::set_f_frsize(::google::protobuf::int64 value) {
  
  f_frsize_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_frsize)
}

// optional int64 f_blocks = 3;
void nfsVFSStat::clear_f_blocks() {
  f_blocks_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_blocks() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_blocks)
  return f_blocks_;
}
 void nfsVFSStat::set_f_blocks(::google::protobuf::int64 value) {
  
  f_blocks_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_blocks)
}

// optional int64 f_bfree = 4;
void nfsVFSStat::clear_f_bfree() {
  f_bfree_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_bfree() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_bfree)
  return f_bfree_;
}
 void nfsVFSStat::set_f_bfree(::google::protobuf::int64 value) {
  
  f_bfree_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_bfree)
}

// optional int64 f_bavail = 5;
void nfsVFSStat::clear_f_bavail() {
  f_bavail_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_bavail() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_bavail)
  return f_bavail_;
}
 void nfsVFSStat::set_f_bavail(::google::protobuf::int64 value) {
  
  f_bavail_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_bavail)
}

// optional int64 f_files = 6;
void nfsVFSStat::clear_f_files() {
  f_files_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_files() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_files)
  return f_files_;
}
 void nfsVFSStat::set_f_files(::google::protobuf::int64 value) {
  
  f_files_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_files)
}

// optional int64 f_ffree = 7;
void nfsVFSStat::clear_f_ffree() {
  f_ffree_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_ffree() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_ffree)
  return f_ffree_;
}
 void nfsVFSStat::set_f_ffree(::google::protobuf::int64 value) {
  
  f_ffree_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_ffree)
}

// optional int64 f_favail = 8;
void nfsVFSStat::clear_f_favail() {
  f_favail_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_favail() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_favail)
  return f_favail_;
}
 void nfsVFSStat::set_f_favail(::google::protobuf::int64 value) {
  
  f_favail_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_favail)
}

// optional int64 f_fsid = 9;
void nfsVFSStat::clear_f_fsid() {
  f_fsid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_fsid() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_fsid)
  return f_fsid_;
}
 void nfsVFSStat::set_f_fsid(::google::protobuf::int64 value) {
  
  f_fsid_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_fsid)
}

// optional int64 f_flag = 10;
void nfsVFSStat::clear_f_flag() {
  f_flag_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_flag() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_flag)
  return f_flag_;
}
 void nfsVFSStat::set_f_flag(::google::protobuf::int64 value) {
  
  f_flag_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_flag)
}

// optional int64 f_namemax = 11;
void nfsVFSStat::clear_f_namemax() {
  f_namemax_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsVFSStat::f_namemax() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.f_namemax)
  return f_namemax_;
}
 void nfsVFSStat::set_f_namemax(::google::protobuf::int64 value) {
  
  f_namemax_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.f_namemax)
}

// optional int32 result = 12;
void nfsVFSStat::clear_result() {
  result_ = 0;
}
 ::google::protobuf::int32 nfsVFSStat::result() const {
  // @@protoc_insertion_point(field_get:nfs.nfsVFSStat.result)
  return result_;
}
 void nfsVFSStat::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsVFSStat.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nfsBool::kResultFieldNumber;
const int nfsBool::kNfsStatFieldNumber;
const int nfsBool::kFiNameFieldNumber;
const int nfsBool::kFiDirnameFieldNumber;
const int nfsBool::kFiPathnameFieldNumber;
const int nfsBool::kFiOffsetFieldNumber;
const int nfsBool::kFiFsFieldNumber;
const int nfsBool::kFiMountFieldNumber;
const int nfsBool::kFiOpenFlagsFieldNumber;
const int nfsBool::kModeTFieldNumber;
const int nfsBool::kStRdevFieldNumber;
const int nfsBool::kBufferSpaceFieldNumber;
const int nfsBool::kStOffsetFieldNumber;
const int nfsBool::kStSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nfsBool::nfsBool()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.nfsBool)
}

void nfsBool::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  nfs_stat_ = const_cast< ::nfs::nfsStat*>(&::nfs::nfsStat::default_instance());
}

nfsBool::nfsBool(const nfsBool& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.nfsBool)
}

void nfsBool::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  nfs_stat_ = NULL;
  fi_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_dirname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_pathname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_offset_ = GOOGLE_LONGLONG(0);
  fi_fs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_mount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_open_flags_ = GOOGLE_LONGLONG(0);
  mode_t_ = GOOGLE_LONGLONG(0);
  st_rdev_ = GOOGLE_LONGLONG(0);
  buffer_space_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  st_offset_ = GOOGLE_LONGLONG(0);
  st_size_ = GOOGLE_LONGLONG(0);
}

nfsBool::~nfsBool() {
  // @@protoc_insertion_point(destructor:nfs.nfsBool)
  SharedDtor();
}

void nfsBool::SharedDtor() {
  fi_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_dirname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_pathname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_fs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_mount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_space_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete nfs_stat_;
  }
}

void nfsBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nfsBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nfsBool_descriptor_;
}

const nfsBool& nfsBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_2dobject_2eproto();
  return *default_instance_;
}

nfsBool* nfsBool::default_instance_ = NULL;

nfsBool* nfsBool::New(::google::protobuf::Arena* arena) const {
  nfsBool* n = new nfsBool;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nfsBool::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<nfsBool*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  result_ = 0;
  if (GetArenaNoVirtual() == NULL && nfs_stat_ != NULL) delete nfs_stat_;
  nfs_stat_ = NULL;
  fi_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_dirname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_offset_ = GOOGLE_LONGLONG(0);
  fi_fs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fi_mount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(fi_open_flags_, st_rdev_);
  ZR_(st_offset_, st_size_);
  buffer_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool nfsBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.nfsBool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nfs_stat;
        break;
      }

      // optional .nfs.nfsStat nfs_stat = 2;
      case 2: {
        if (tag == 18) {
         parse_nfs_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nfs_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fi_name;
        break;
      }

      // optional string fi_name = 3;
      case 3: {
        if (tag == 26) {
         parse_fi_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fi_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fi_name().data(), this->fi_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsBool.fi_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fi_dirname;
        break;
      }

      // optional string fi_dirname = 4;
      case 4: {
        if (tag == 34) {
         parse_fi_dirname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fi_dirname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fi_dirname().data(), this->fi_dirname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsBool.fi_dirname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fi_pathname;
        break;
      }

      // optional string fi_pathname = 5;
      case 5: {
        if (tag == 42) {
         parse_fi_pathname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fi_pathname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fi_pathname().data(), this->fi_pathname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsBool.fi_pathname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fi_offset;
        break;
      }

      // optional int64 fi_offset = 6;
      case 6: {
        if (tag == 48) {
         parse_fi_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fi_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_fi_fs;
        break;
      }

      // optional string fi_fs = 7;
      case 7: {
        if (tag == 58) {
         parse_fi_fs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fi_fs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fi_fs().data(), this->fi_fs().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsBool.fi_fs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fi_mount;
        break;
      }

      // optional string fi_mount = 8;
      case 8: {
        if (tag == 66) {
         parse_fi_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fi_mount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fi_mount().data(), this->fi_mount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsBool.fi_mount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fi_open_flags;
        break;
      }

      // optional int64 fi_open_flags = 9;
      case 9: {
        if (tag == 72) {
         parse_fi_open_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fi_open_flags_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mode_t;
        break;
      }

      // optional int64 mode_t = 10;
      case 10: {
        if (tag == 80) {
         parse_mode_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mode_t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_st_rdev;
        break;
      }

      // optional int64 st_rdev = 11;
      case 11: {
        if (tag == 88) {
         parse_st_rdev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_rdev_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_buffer_space;
        break;
      }

      // optional string buffer_space = 12;
      case 12: {
        if (tag == 98) {
         parse_buffer_space:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer_space()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->buffer_space().data(), this->buffer_space().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsBool.buffer_space"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_st_offset;
        break;
      }

      // optional int64 st_offset = 13;
      case 13: {
        if (tag == 104) {
         parse_st_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_offset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_st_size;
        break;
      }

      // optional int64 st_size = 14;
      case 14: {
        if (tag == 112) {
         parse_st_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &st_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.nfsBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.nfsBool)
  return false;
#undef DO_
}

void nfsBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.nfsBool)
  // optional int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .nfs.nfsStat nfs_stat = 2;
  if (this->has_nfs_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nfs_stat_, output);
  }

  // optional string fi_name = 3;
  if (this->fi_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_name().data(), this->fi_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fi_name(), output);
  }

  // optional string fi_dirname = 4;
  if (this->fi_dirname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_dirname().data(), this->fi_dirname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_dirname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fi_dirname(), output);
  }

  // optional string fi_pathname = 5;
  if (this->fi_pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_pathname().data(), this->fi_pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_pathname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fi_pathname(), output);
  }

  // optional int64 fi_offset = 6;
  if (this->fi_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fi_offset(), output);
  }

  // optional string fi_fs = 7;
  if (this->fi_fs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_fs().data(), this->fi_fs().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_fs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fi_fs(), output);
  }

  // optional string fi_mount = 8;
  if (this->fi_mount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_mount().data(), this->fi_mount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_mount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fi_mount(), output);
  }

  // optional int64 fi_open_flags = 9;
  if (this->fi_open_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->fi_open_flags(), output);
  }

  // optional int64 mode_t = 10;
  if (this->mode_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->mode_t(), output);
  }

  // optional int64 st_rdev = 11;
  if (this->st_rdev() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->st_rdev(), output);
  }

  // optional string buffer_space = 12;
  if (this->buffer_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buffer_space().data(), this->buffer_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.buffer_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->buffer_space(), output);
  }

  // optional int64 st_offset = 13;
  if (this->st_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->st_offset(), output);
  }

  // optional int64 st_size = 14;
  if (this->st_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->st_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.nfsBool)
}

::google::protobuf::uint8* nfsBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.nfsBool)
  // optional int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .nfs.nfsStat nfs_stat = 2;
  if (this->has_nfs_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->nfs_stat_, target);
  }

  // optional string fi_name = 3;
  if (this->fi_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_name().data(), this->fi_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fi_name(), target);
  }

  // optional string fi_dirname = 4;
  if (this->fi_dirname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_dirname().data(), this->fi_dirname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_dirname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fi_dirname(), target);
  }

  // optional string fi_pathname = 5;
  if (this->fi_pathname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_pathname().data(), this->fi_pathname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_pathname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fi_pathname(), target);
  }

  // optional int64 fi_offset = 6;
  if (this->fi_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fi_offset(), target);
  }

  // optional string fi_fs = 7;
  if (this->fi_fs().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_fs().data(), this->fi_fs().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_fs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fi_fs(), target);
  }

  // optional string fi_mount = 8;
  if (this->fi_mount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fi_mount().data(), this->fi_mount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.fi_mount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fi_mount(), target);
  }

  // optional int64 fi_open_flags = 9;
  if (this->fi_open_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->fi_open_flags(), target);
  }

  // optional int64 mode_t = 10;
  if (this->mode_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->mode_t(), target);
  }

  // optional int64 st_rdev = 11;
  if (this->st_rdev() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->st_rdev(), target);
  }

  // optional string buffer_space = 12;
  if (this->buffer_space().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->buffer_space().data(), this->buffer_space().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsBool.buffer_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->buffer_space(), target);
  }

  // optional int64 st_offset = 13;
  if (this->st_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->st_offset(), target);
  }

  // optional int64 st_size = 14;
  if (this->st_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->st_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.nfsBool)
  return target;
}

int nfsBool::ByteSize() const {
  int total_size = 0;

  // optional int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // optional .nfs.nfsStat nfs_stat = 2;
  if (this->has_nfs_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nfs_stat_);
  }

  // optional string fi_name = 3;
  if (this->fi_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fi_name());
  }

  // optional string fi_dirname = 4;
  if (this->fi_dirname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fi_dirname());
  }

  // optional string fi_pathname = 5;
  if (this->fi_pathname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fi_pathname());
  }

  // optional int64 fi_offset = 6;
  if (this->fi_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fi_offset());
  }

  // optional string fi_fs = 7;
  if (this->fi_fs().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fi_fs());
  }

  // optional string fi_mount = 8;
  if (this->fi_mount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fi_mount());
  }

  // optional int64 fi_open_flags = 9;
  if (this->fi_open_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fi_open_flags());
  }

  // optional int64 mode_t = 10;
  if (this->mode_t() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mode_t());
  }

  // optional int64 st_rdev = 11;
  if (this->st_rdev() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_rdev());
  }

  // optional string buffer_space = 12;
  if (this->buffer_space().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->buffer_space());
  }

  // optional int64 st_offset = 13;
  if (this->st_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_offset());
  }

  // optional int64 st_size = 14;
  if (this->st_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->st_size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nfsBool::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nfsBool* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nfsBool>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nfsBool::MergeFrom(const nfsBool& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.has_nfs_stat()) {
    mutable_nfs_stat()->::nfs::nfsStat::MergeFrom(from.nfs_stat());
  }
  if (from.fi_name().size() > 0) {

    fi_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fi_name_);
  }
  if (from.fi_dirname().size() > 0) {

    fi_dirname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fi_dirname_);
  }
  if (from.fi_pathname().size() > 0) {

    fi_pathname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fi_pathname_);
  }
  if (from.fi_offset() != 0) {
    set_fi_offset(from.fi_offset());
  }
  if (from.fi_fs().size() > 0) {

    fi_fs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fi_fs_);
  }
  if (from.fi_mount().size() > 0) {

    fi_mount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fi_mount_);
  }
  if (from.fi_open_flags() != 0) {
    set_fi_open_flags(from.fi_open_flags());
  }
  if (from.mode_t() != 0) {
    set_mode_t(from.mode_t());
  }
  if (from.st_rdev() != 0) {
    set_st_rdev(from.st_rdev());
  }
  if (from.buffer_space().size() > 0) {

    buffer_space_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_space_);
  }
  if (from.st_offset() != 0) {
    set_st_offset(from.st_offset());
  }
  if (from.st_size() != 0) {
    set_st_size(from.st_size());
  }
}

void nfsBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nfsBool::CopyFrom(const nfsBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nfsBool::IsInitialized() const {

  return true;
}

void nfsBool::Swap(nfsBool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nfsBool::InternalSwap(nfsBool* other) {
  std::swap(result_, other->result_);
  std::swap(nfs_stat_, other->nfs_stat_);
  fi_name_.Swap(&other->fi_name_);
  fi_dirname_.Swap(&other->fi_dirname_);
  fi_pathname_.Swap(&other->fi_pathname_);
  std::swap(fi_offset_, other->fi_offset_);
  fi_fs_.Swap(&other->fi_fs_);
  fi_mount_.Swap(&other->fi_mount_);
  std::swap(fi_open_flags_, other->fi_open_flags_);
  std::swap(mode_t_, other->mode_t_);
  std::swap(st_rdev_, other->st_rdev_);
  buffer_space_.Swap(&other->buffer_space_);
  std::swap(st_offset_, other->st_offset_);
  std::swap(st_size_, other->st_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nfsBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nfsBool_descriptor_;
  metadata.reflection = nfsBool_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nfsBool

// optional int32 result = 1;
void nfsBool::clear_result() {
  result_ = 0;
}
 ::google::protobuf::int32 nfsBool::result() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.result)
  return result_;
}
 void nfsBool::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.result)
}

// optional .nfs.nfsStat nfs_stat = 2;
bool nfsBool::has_nfs_stat() const {
  return !_is_default_instance_ && nfs_stat_ != NULL;
}
void nfsBool::clear_nfs_stat() {
  if (GetArenaNoVirtual() == NULL && nfs_stat_ != NULL) delete nfs_stat_;
  nfs_stat_ = NULL;
}
const ::nfs::nfsStat& nfsBool::nfs_stat() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.nfs_stat)
  return nfs_stat_ != NULL ? *nfs_stat_ : *default_instance_->nfs_stat_;
}
::nfs::nfsStat* nfsBool::mutable_nfs_stat() {
  
  if (nfs_stat_ == NULL) {
    nfs_stat_ = new ::nfs::nfsStat;
  }
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.nfs_stat)
  return nfs_stat_;
}
::nfs::nfsStat* nfsBool::release_nfs_stat() {
  
  ::nfs::nfsStat* temp = nfs_stat_;
  nfs_stat_ = NULL;
  return temp;
}
void nfsBool::set_allocated_nfs_stat(::nfs::nfsStat* nfs_stat) {
  delete nfs_stat_;
  nfs_stat_ = nfs_stat;
  if (nfs_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.nfs_stat)
}

// optional string fi_name = 3;
void nfsBool::clear_fi_name() {
  fi_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsBool::fi_name() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_name)
  return fi_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_fi_name(const ::std::string& value) {
  
  fi_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_name)
}
 void nfsBool::set_fi_name(const char* value) {
  
  fi_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_name)
}
 void nfsBool::set_fi_name(const char* value, size_t size) {
  
  fi_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_name)
}
 ::std::string* nfsBool::mutable_fi_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_name)
  return fi_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsBool::release_fi_name() {
  
  return fi_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_allocated_fi_name(::std::string* fi_name) {
  if (fi_name != NULL) {
    
  } else {
    
  }
  fi_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_name);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_name)
}

// optional string fi_dirname = 4;
void nfsBool::clear_fi_dirname() {
  fi_dirname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsBool::fi_dirname() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_dirname)
  return fi_dirname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_fi_dirname(const ::std::string& value) {
  
  fi_dirname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_dirname)
}
 void nfsBool::set_fi_dirname(const char* value) {
  
  fi_dirname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_dirname)
}
 void nfsBool::set_fi_dirname(const char* value, size_t size) {
  
  fi_dirname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_dirname)
}
 ::std::string* nfsBool::mutable_fi_dirname() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_dirname)
  return fi_dirname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsBool::release_fi_dirname() {
  
  return fi_dirname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_allocated_fi_dirname(::std::string* fi_dirname) {
  if (fi_dirname != NULL) {
    
  } else {
    
  }
  fi_dirname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_dirname);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_dirname)
}

// optional string fi_pathname = 5;
void nfsBool::clear_fi_pathname() {
  fi_pathname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsBool::fi_pathname() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_pathname)
  return fi_pathname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_fi_pathname(const ::std::string& value) {
  
  fi_pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_pathname)
}
 void nfsBool::set_fi_pathname(const char* value) {
  
  fi_pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_pathname)
}
 void nfsBool::set_fi_pathname(const char* value, size_t size) {
  
  fi_pathname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_pathname)
}
 ::std::string* nfsBool::mutable_fi_pathname() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_pathname)
  return fi_pathname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsBool::release_fi_pathname() {
  
  return fi_pathname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_allocated_fi_pathname(::std::string* fi_pathname) {
  if (fi_pathname != NULL) {
    
  } else {
    
  }
  fi_pathname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_pathname);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_pathname)
}

// optional int64 fi_offset = 6;
void nfsBool::clear_fi_offset() {
  fi_offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsBool::fi_offset() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_offset)
  return fi_offset_;
}
 void nfsBool::set_fi_offset(::google::protobuf::int64 value) {
  
  fi_offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_offset)
}

// optional string fi_fs = 7;
void nfsBool::clear_fi_fs() {
  fi_fs_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsBool::fi_fs() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_fs)
  return fi_fs_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_fi_fs(const ::std::string& value) {
  
  fi_fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_fs)
}
 void nfsBool::set_fi_fs(const char* value) {
  
  fi_fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_fs)
}
 void nfsBool::set_fi_fs(const char* value, size_t size) {
  
  fi_fs_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_fs)
}
 ::std::string* nfsBool::mutable_fi_fs() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_fs)
  return fi_fs_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsBool::release_fi_fs() {
  
  return fi_fs_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_allocated_fi_fs(::std::string* fi_fs) {
  if (fi_fs != NULL) {
    
  } else {
    
  }
  fi_fs_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_fs);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_fs)
}

// optional string fi_mount = 8;
void nfsBool::clear_fi_mount() {
  fi_mount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsBool::fi_mount() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_mount)
  return fi_mount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_fi_mount(const ::std::string& value) {
  
  fi_mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_mount)
}
 void nfsBool::set_fi_mount(const char* value) {
  
  fi_mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.fi_mount)
}
 void nfsBool::set_fi_mount(const char* value, size_t size) {
  
  fi_mount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.fi_mount)
}
 ::std::string* nfsBool::mutable_fi_mount() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.fi_mount)
  return fi_mount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsBool::release_fi_mount() {
  
  return fi_mount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_allocated_fi_mount(::std::string* fi_mount) {
  if (fi_mount != NULL) {
    
  } else {
    
  }
  fi_mount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fi_mount);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.fi_mount)
}

// optional int64 fi_open_flags = 9;
void nfsBool::clear_fi_open_flags() {
  fi_open_flags_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsBool::fi_open_flags() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.fi_open_flags)
  return fi_open_flags_;
}
 void nfsBool::set_fi_open_flags(::google::protobuf::int64 value) {
  
  fi_open_flags_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.fi_open_flags)
}

// optional int64 mode_t = 10;
void nfsBool::clear_mode_t() {
  mode_t_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsBool::mode_t() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.mode_t)
  return mode_t_;
}
 void nfsBool::set_mode_t(::google::protobuf::int64 value) {
  
  mode_t_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.mode_t)
}

// optional int64 st_rdev = 11;
void nfsBool::clear_st_rdev() {
  st_rdev_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsBool::st_rdev() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.st_rdev)
  return st_rdev_;
}
 void nfsBool::set_st_rdev(::google::protobuf::int64 value) {
  
  st_rdev_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.st_rdev)
}

// optional string buffer_space = 12;
void nfsBool::clear_buffer_space() {
  buffer_space_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& nfsBool::buffer_space() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.buffer_space)
  return buffer_space_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_buffer_space(const ::std::string& value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.nfsBool.buffer_space)
}
 void nfsBool::set_buffer_space(const char* value) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.nfsBool.buffer_space)
}
 void nfsBool::set_buffer_space(const char* value, size_t size) {
  
  buffer_space_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsBool.buffer_space)
}
 ::std::string* nfsBool::mutable_buffer_space() {
  
  // @@protoc_insertion_point(field_mutable:nfs.nfsBool.buffer_space)
  return buffer_space_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* nfsBool::release_buffer_space() {
  
  return buffer_space_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void nfsBool::set_allocated_buffer_space(::std::string* buffer_space) {
  if (buffer_space != NULL) {
    
  } else {
    
  }
  buffer_space_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer_space);
  // @@protoc_insertion_point(field_set_allocated:nfs.nfsBool.buffer_space)
}

// optional int64 st_offset = 13;
void nfsBool::clear_st_offset() {
  st_offset_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsBool::st_offset() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.st_offset)
  return st_offset_;
}
 void nfsBool::set_st_offset(::google::protobuf::int64 value) {
  
  st_offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.st_offset)
}

// optional int64 st_size = 14;
void nfsBool::clear_st_size() {
  st_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 nfsBool::st_size() const {
  // @@protoc_insertion_point(field_get:nfs.nfsBool.st_size)
  return st_size_;
}
 void nfsBool::set_st_size(::google::protobuf::int64 value) {
  
  st_size_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsBool.st_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int nfsDirList::kNfsDirResultFieldNumber;
const int nfsDirList::kNfsDirListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

nfsDirList::nfsDirList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nfs.nfsDirList)
}

void nfsDirList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

nfsDirList::nfsDirList(const nfsDirList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nfs.nfsDirList)
}

void nfsDirList::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nfs_dir_result_ = 0;
}

nfsDirList::~nfsDirList() {
  // @@protoc_insertion_point(destructor:nfs.nfsDirList)
  SharedDtor();
}

void nfsDirList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void nfsDirList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nfsDirList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nfsDirList_descriptor_;
}

const nfsDirList& nfsDirList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nfs_2dobject_2eproto();
  return *default_instance_;
}

nfsDirList* nfsDirList::default_instance_ = NULL;

nfsDirList* nfsDirList::New(::google::protobuf::Arena* arena) const {
  nfsDirList* n = new nfsDirList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void nfsDirList::Clear() {
  nfs_dir_result_ = 0;
  nfs_dir_list_.Clear();
}

bool nfsDirList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nfs.nfsDirList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nfs_dir_result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfs_dir_result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nfs_dir_list;
        break;
      }

      // repeated string nfs_dir_list = 2;
      case 2: {
        if (tag == 18) {
         parse_nfs_dir_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nfs_dir_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nfs_dir_list(this->nfs_dir_list_size() - 1).data(),
            this->nfs_dir_list(this->nfs_dir_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nfs.nfsDirList.nfs_dir_list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nfs_dir_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nfs.nfsDirList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nfs.nfsDirList)
  return false;
#undef DO_
}

void nfsDirList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nfs.nfsDirList)
  // optional int32 nfs_dir_result = 1;
  if (this->nfs_dir_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nfs_dir_result(), output);
  }

  // repeated string nfs_dir_list = 2;
  for (int i = 0; i < this->nfs_dir_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nfs_dir_list(i).data(), this->nfs_dir_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsDirList.nfs_dir_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nfs_dir_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:nfs.nfsDirList)
}

::google::protobuf::uint8* nfsDirList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nfs.nfsDirList)
  // optional int32 nfs_dir_result = 1;
  if (this->nfs_dir_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nfs_dir_result(), target);
  }

  // repeated string nfs_dir_list = 2;
  for (int i = 0; i < this->nfs_dir_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nfs_dir_list(i).data(), this->nfs_dir_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nfs.nfsDirList.nfs_dir_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nfs_dir_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nfs.nfsDirList)
  return target;
}

int nfsDirList::ByteSize() const {
  int total_size = 0;

  // optional int32 nfs_dir_result = 1;
  if (this->nfs_dir_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nfs_dir_result());
  }

  // repeated string nfs_dir_list = 2;
  total_size += 1 * this->nfs_dir_list_size();
  for (int i = 0; i < this->nfs_dir_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nfs_dir_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nfsDirList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const nfsDirList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const nfsDirList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nfsDirList::MergeFrom(const nfsDirList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nfs_dir_list_.MergeFrom(from.nfs_dir_list_);
  if (from.nfs_dir_result() != 0) {
    set_nfs_dir_result(from.nfs_dir_result());
  }
}

void nfsDirList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nfsDirList::CopyFrom(const nfsDirList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nfsDirList::IsInitialized() const {

  return true;
}

void nfsDirList::Swap(nfsDirList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void nfsDirList::InternalSwap(nfsDirList* other) {
  std::swap(nfs_dir_result_, other->nfs_dir_result_);
  nfs_dir_list_.UnsafeArenaSwap(&other->nfs_dir_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata nfsDirList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nfsDirList_descriptor_;
  metadata.reflection = nfsDirList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// nfsDirList

// optional int32 nfs_dir_result = 1;
void nfsDirList::clear_nfs_dir_result() {
  nfs_dir_result_ = 0;
}
 ::google::protobuf::int32 nfsDirList::nfs_dir_result() const {
  // @@protoc_insertion_point(field_get:nfs.nfsDirList.nfs_dir_result)
  return nfs_dir_result_;
}
 void nfsDirList::set_nfs_dir_result(::google::protobuf::int32 value) {
  
  nfs_dir_result_ = value;
  // @@protoc_insertion_point(field_set:nfs.nfsDirList.nfs_dir_result)
}

// repeated string nfs_dir_list = 2;
int nfsDirList::nfs_dir_list_size() const {
  return nfs_dir_list_.size();
}
void nfsDirList::clear_nfs_dir_list() {
  nfs_dir_list_.Clear();
}
 const ::std::string& nfsDirList::nfs_dir_list(int index) const {
  // @@protoc_insertion_point(field_get:nfs.nfsDirList.nfs_dir_list)
  return nfs_dir_list_.Get(index);
}
 ::std::string* nfsDirList::mutable_nfs_dir_list(int index) {
  // @@protoc_insertion_point(field_mutable:nfs.nfsDirList.nfs_dir_list)
  return nfs_dir_list_.Mutable(index);
}
 void nfsDirList::set_nfs_dir_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nfs.nfsDirList.nfs_dir_list)
  nfs_dir_list_.Mutable(index)->assign(value);
}
 void nfsDirList::set_nfs_dir_list(int index, const char* value) {
  nfs_dir_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nfs.nfsDirList.nfs_dir_list)
}
 void nfsDirList::set_nfs_dir_list(int index, const char* value, size_t size) {
  nfs_dir_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nfs.nfsDirList.nfs_dir_list)
}
 ::std::string* nfsDirList::add_nfs_dir_list() {
  return nfs_dir_list_.Add();
}
 void nfsDirList::add_nfs_dir_list(const ::std::string& value) {
  nfs_dir_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nfs.nfsDirList.nfs_dir_list)
}
 void nfsDirList::add_nfs_dir_list(const char* value) {
  nfs_dir_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nfs.nfsDirList.nfs_dir_list)
}
 void nfsDirList::add_nfs_dir_list(const char* value, size_t size) {
  nfs_dir_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nfs.nfsDirList.nfs_dir_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
nfsDirList::nfs_dir_list() const {
  // @@protoc_insertion_point(field_list:nfs.nfsDirList.nfs_dir_list)
  return nfs_dir_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
nfsDirList::mutable_nfs_dir_list() {
  // @@protoc_insertion_point(field_mutable_list:nfs.nfsDirList.nfs_dir_list)
  return &nfs_dir_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nfs

// @@protoc_insertion_point(global_scope)
